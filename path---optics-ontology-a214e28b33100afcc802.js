webpackJsonp([8064736903663],{442:function(e,t){e.exports={data:{postBySlug:{html:'<h1 id="the-optic-ontology"><a href="#the-optic-ontology" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Optic Ontology</h1>\n<p>We’ve created an ontology for the Optic knowledge graph based on how fellow developers we have interviewed think about code. Our goal is to keep what is happening behind the scenes as intuitive as possible, while also providing the flexibility Optic needs to do tasks for which it was never explicitly programmed.</p>\n<h2 id="schemas"><a href="#schemas" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Schemas</h2>\n<p><em>analogous to a static type</em></p>\n<p>It all starts with the <em>Schema</em> which describes the structure of entities Optic might find in code. In Optic, Schemas are defined using <a href="http://json-Schema.org/">JSON Schema</a> and they can contain references to one another. There are Schemas for things like routes, import statements, networking code and page layouts. Existing standards that rely on JSON Schemas, like Swagger, work with Optic.</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n\t“title”<span class="token operator">:</span> “import Schema”<span class="token punctuation">,</span>\n\t“type”<span class="token operator">:</span> “object”<span class="token punctuation">,</span>\n\t“required”<span class="token operator">:</span> <span class="token punctuation">[</span>“definedAs”<span class="token punctuation">,</span> “pathTo”<span class="token punctuation">]</span>\n\t“properties”<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t“definedAs”<span class="token operator">:</span> <span class="token punctuation">{</span> “type”<span class="token operator">:</span> “string” <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t“pathTo”<span class="token operator">:</span> <span class="token punctuation">{</span> “type”<span class="token operator">:</span> “string” <span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2 id="lenses"><a href="#lenses" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Lenses</h2>\n<p><em>analogous to an object with an apply &#x26; unapply method</em></p>\n<p><em>Lenses</em> render and parse code and have a many-to-one relationship with Schemas. This is because there’s a lot of different ways to represent a Schema in code and those choices are different depending on programming environment, frameworks and the conventions of the team.</p>\n<p><img src="/doc-images/graph-Schema-Lens.svg" alt="alt text"></p>\n<p>A Lens has a pure render function (think react) that will create code from a Schema. In addition each compiled Lens contains a parse function that can read code and create a JSON object that conforms to its Schema. There are Lenses for things like express-js routes, mongodb queries, and iOS layouts.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">//{definedAs: ‘test’, pathTo: ‘path/to/test’} is type “import Schema”\n\n//render would produce\nimport test from ‘path/to/test’\n//another Lens might render it this way\nconst test = require(‘path/to/test’)\n\n//running parse on this code would return the following model\nimport hello from ‘world’ //{definedAs: ‘hello’, pathTo: ‘world’}</code></pre>\n      </div>\n<h2 id="transformations"><a href="#transformations" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Transformations</h2>\n<p><em>analogous to implicit conversions</em></p>\n<p>Most code in any project is related. For instance your notion of ‘customers’ affects how your queries, API, client side networking code and forms are written. <em>Transformations</em> do what human programmers do today: change one kind of code into another. This is done at the Schema level. A model definition might be transformed into a set of CRUD Routes, or an API Route might be transformed into a form in the UI. Those Schemas are then rendered into real code by the appropriate Lens. Transformations are the only real code we ask developers to write in Optic and they serve as the edges between the different nodes in our knowledge graph.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">//a transform function that turns a model into a post route might look like this\n//input: mongoose-Schema, output: optic:rest/route\nfunction transform(input) {\n    const routeName = input.name.toLowerCase()\n    const route = “/“+routeName\n\n    const parameters = Object.keys(input.Schema).map(i=&gt; {\n        return {\n            in: ‘body’,\n            name: i\n        }\n    })\n\n    return {\n        method: “post”,\n        url: route,\n        parameters\n    }\n}</code></pre>\n      </div>\n<p>Here’s an example knowledge graph of several Schemas connected by Transformations. Direct Transformations (Model Definition -> Rest Route) are explicitly programmed.</p>\n<p><img src="/doc-images/graph-transform.svg" alt="alt text"></p>\n<p>Because of the way Optic is designed, it can walk the graph by piping the output of one transformation into the input of the next one. This means we can transform a Model Definition from our server into a Form in our client code without anyone ever explicitly coding that use case.</p>\n<p><img src="/doc-images/graph-transform-walked.svg" alt="alt text"></p>\n<p>This is why it is important, whenever possible, to implement the standard Schemas Optic provides. Doing so allows you to tap into a vast web of knowledge at a very small price.</p>',timeToRead:3,excerpt:"The Optic Ontology We’ve created an ontology for the Optic knowledge graph based on how fellow developers we have interviewed think about…",frontmatter:{title:"Optic's Ontology",cover:null,date:null,category:null,tags:null}},tableOfContents:{chapters:[{title:"What is Optic?",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/another-code-generator.md absPath of file",childMarkdownRemark:{fields:{slug:"/another-code-generator"},frontmatter:{title:"Another Code Generator?",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/technical-overview.md absPath of file",childMarkdownRemark:{fields:{slug:"/technical-overview"},frontmatter:{title:"Technical Overview",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/ontology.md absPath of file",childMarkdownRemark:{fields:{slug:"/optics-ontology"},frontmatter:{title:"Optic's Ontology",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/markdown.md absPath of file",childMarkdownRemark:{fields:{slug:"/optic-markdown"},frontmatter:{title:"Optic Markdown",type:null}}}}]},{title:"Using Optic",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/get-started.md absPath of file",childMarkdownRemark:{fields:{slug:"/using-get-started"},frontmatter:{title:"Using Get Started",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/workflow.md absPath of file",childMarkdownRemark:{fields:{slug:"/workflow"},frontmatter:{title:"Workflow",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/properties.md absPath of file",childMarkdownRemark:{fields:{slug:"/properties"},frontmatter:{title:"Properties",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/search.md absPath of file",childMarkdownRemark:{fields:{slug:"/search"},frontmatter:{title:"Search",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/transform.md absPath of file",childMarkdownRemark:{fields:{slug:"/transform"},frontmatter:{title:"Transform",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/sync.md absPath of file",childMarkdownRemark:{fields:{slug:"/sync"},frontmatter:{title:"Sync",type:null}}}}]},{title:"Authoring Knowledge",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/get-started.md absPath of file",childMarkdownRemark:{fields:{slug:"/authoring-get-started"},frontmatter:{title:"Authoring Get Started",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/knowledge-packages.md absPath of file",childMarkdownRemark:{fields:{slug:"/knowledge-packages"},frontmatter:{title:"Knowledge Packages",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/schemas.md absPath of file",childMarkdownRemark:{fields:{slug:"/schemas"},frontmatter:{title:"Schemas",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/lenses.md absPath of file",childMarkdownRemark:{fields:{slug:"/lenses"},frontmatter:{title:"Lenses",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/transformations.md absPath of file",childMarkdownRemark:{fields:{slug:"/transformations"},frontmatter:{title:"Transformations",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/publishing.md absPath of file",childMarkdownRemark:{fields:{slug:"/publishing"},frontmatter:{title:"Publishing",type:null}}}}]}]},tableOfContentsSkills:{chapters:[{title:"Generate RequestJS calls for every route in an Express backend",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/skills/generate-requestjs.md absPath of file",childMarkdownRemark:{headings:[{value:"Generate RequestJS calls for every route in an Express backend",depth:1},{value:"Requirements",depth:2},{value:"Including Skills",depth:2},{value:"Our First Transform",depth:2},{value:"Generating Networking Calls from your Client Code",depth:2},{value:"Name and Source Annotations",depth:3},{value:"Syncing API & Networking Code",depth:2},{value:"Going Further",depth:2}],fields:{slug:"/generate-request-js-calls-for-every-route-in-an-express-backend"},frontmatter:{title:"Generate RequestJS calls for every route in an Express backend",type:"skill"}}}}]}]}},pathContext:{slug:"/optics-ontology",type:null}}}});
//# sourceMappingURL=path---optics-ontology-a214e28b33100afcc802.js.map