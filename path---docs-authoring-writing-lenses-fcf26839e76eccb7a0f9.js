webpackJsonp([0xd53e34ba021b],{459:function(e,t){e.exports={data:{postBySlug:{html:'<h1 id="writing-lenses"><a href="#writing-lenses" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Writing Lenses</h1>\n<p><strong>What is a lens?</strong> - A lens can parse and mutate a specific kind of code. It can extract a JSON object representing the code. If you change that JSON object and pass it back into the mutator a lens will update the raw code to match the new model. Lenses serve as Optic\'s primary interface for interacting with discrete types of code.</p>\n<p>Defining a Lens in Optic Markdown is a lot like showing your friend a snippet of code and pointing out all the parts they can edit. You do not need to write any code or have prior knowledge of AST trees to write a Lens. It will take your description from markdown and compile it into the code it needs to walk the AST Tree and extract values. Lenses serve as loose matchers for code and will match any code that is structurally similar regardless of formatting.</p>\n<h2 id="match-and-extract"><a href="#match-and-extract" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Match and Extract</h2>\n<p>Optic matches code and extracts values from that code similar to how a regex works. When a Lens is compiled, it is turned into a AST pattern that is analogous to a regex pattern. This description is compared to new instances from left -> right and will stop traversing the AST Tree as soon as a node is found that does not match the rules in the description.</p>\n<blockquote>\n<p>As a node is matching, values specified in the Lens are extracted and added to a result object.</p>\n</blockquote>\n<blockquote>\n<p>If a node in your code meets the description and the extracted values constitute a valid Schema of the type defined by the Lens, then a match is found.</p>\n</blockquote>\n<h2 id="training-optic"><a href="#training-optic" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Training Optic</h2>\n<p>Defining one of Optic\'s internal AST Patterns is very challenging, even Optic\'s engineers do not do that by hand. Instead we use Optic\'s trainer to teach Optic how to interact with our code.</p>\n<p>You can start the trainer by running:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">opticmd starttrainer</code></pre>\n      </div>\n<p>The first step is to provide Optic with an example snippet. When reading your code, Optic will look for sections of similar forum to this snippet. The snippet is also used as the base that all instances of this lens generate from.\n<img src="/doc-images/example-snippet.png" alt="alt text"></p>\n<p>Next you need to tell Optic how you\'d expect it to the expected value for parsing this snippet. In this example we\'re training a require call in javascript. We expect Optic to parse this code as an object with a property called <code class="language-text">as</code> and <code class="language-text">path</code></p>\n<p><strong>Note:</strong> A know limitation of the trainer is that it can\'t handle mapped schemas yet. This is coming very soon\n<img src="/doc-images/expected-value.png" alt="alt text"></p>\n<p>When you press <code class="language-text">Train Lens</code> Optic analyses your snippet and the expected value and figures out how to build a lens that guarantees the two line up. You can see which parts of your snippet Optic is extracting values from in the \'Value Candidates section of the\' verify card. Sometimes if there is ambiguity in the training process Optic will present you with choices for one or more fields.</p>\n<p><img src="/doc-images/verify-results.png" alt="alt text"></p>\n<h3 id="setting-variables"><a href="#setting-variables" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Setting Variables</h3>\n<p>Variables are a key part of Optic’s loose matching. When you define a variable in your Lens, it tells Optic that a token can have any value, as long as it is consistent throughout the code block.</p>\n<p>For instance without a variable defined, all 3 instances of “result” must equal “result” for Optic to match this section of code.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">function test(result) {\n\tmessage.post(result)\n\tsystem.process(result)\n}</code></pre>\n      </div>\n<p>If you define a variable for ‘result’ the following code will also be matched,</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">function test(otherToken) {\n\tmessage.post(otherToken)\n\tsystem.process(otherToken)\n}</code></pre>\n      </div>\n<p>But this code would not be matched</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">function test(otherToken) {\n\tmessage.post(otherToken)\n\tsystem.process(result)\n}</code></pre>\n      </div>\n<p>There are two types of variables. Those defined in <code class="language-text">self</code> and those in <code class="language-text">scope</code>.</p>\n<ul>\n<li><strong>self</strong> - enforces consistency of tokens in this node and its children</li>\n<li><strong>scope</strong> - If the node\'s parent also defines a variable with the same name then the value of this variable must match the one in its parent. If it\'s parent does not define a variable with the same name this behaves the same as self.</li>\n</ul>\n<p>Variables can be set by typing the name of the variables in the input:\n<img src="/doc-images/variables.png" alt="alt text"></p>\n<h3 id="containers"><a href="#containers" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Containers</h3>\n<p>Containers can be used to label callbacks or other blocks of code and set rules about what kind of code can go inside of them. A container is defined in the example snippet by adding an inline comment with the following format <code class="language-text">//:{container name}</code>. If you add one or more containers you will be given options to configure them in the trainer.</p>\n<p><img src="/doc-images/containers.png" alt="alt text"></p>\n<p>For each container in your snippet a children rule must be defined:</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>matches when</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Any</td>\n<td>always</td>\n</tr>\n<tr>\n<td>Same Plus</td>\n<td>children from example snippet are present, in the order they appear in the example, plus any other children.  \n<br>\n example snippet = \n[\nA, B, C\n]\n \n<br>\n \n[\nB, C\n]\n false \n<br>\n \n[\nA, D, B, C\n]\n true \n<br>\n \n[\nA, B, C\n]\n true \n<br>\n \n[\nA, B, C, D\n]\n true</td>\n</tr>\n<tr>\n<td>Same Plus Any Order</td>\n<td>children from the example snippet are present, in any order, plus any other children \n<br>\n example snippet = \n[\nA, B, C\n]\n \n<br>\n \n[\nC, B, D, E, A\n]\n true \n<br>\n \n[\nA, B, C\n]\n true \n<br>\n \n[\nC, B, D, E\n]\n false</td>\n</tr>\n<tr>\n<td>Same Any Order</td>\n<td>all children from the example snippet are present, in any order,\n<br>\n example snippet = \n[\nA, B, C\n]\n \n<br>\n \n[\nB, C, A\n]\n true \n<br>\n \n[\nC, A, B\n]\n true \n<br>\n \n[\nC\n]\n false \n<br>\n \n[\nC, B, A, D\n]\n false</td>\n</tr>\n<tr>\n<td>exact</td>\n<td>children match those in the example snippet</td>\n</tr>\n</tbody>\n</table>\n<h3 id="customize-schema"><a href="#customize-schema" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Customize Schema</h3>\n<p>During training Optic assigns a very basic schema to your lens. If you want to customize this schema you can update the schema by clicking \'Customize Schema\'.</p>\n<p><img src="/doc-images/schema.png" alt="alt text"></p>\n<p>If you want Optic to implement another schema you can reference it using its identifier ie <code class="language-text">optic:package@0.1.0/schema</code>. Make sure the output of your lens conforms to whatever schema you choose or Optic will instances it finds in your code at runtime.</p>\n<h2 id="testing-the-lens"><a href="#testing-the-lens" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Testing the Lens</h2>\n<p>When you\'re ready to try out the lens click <code class="language-text">Proceed to Testing</code>. Here you can experiment with the lens you\'ve configured and make sure it work as you would expect within Optic.</p>\n<h2 id="saving"><a href="#saving" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Saving</h2>\n<p>When you are finished testing your lens give it a name and an id and hit \'Finish\'. An Optic Markdown annotation representing this lens will be added to your markdown file automatically.</p>\n<div class="gatsby-highlight">\n      <pre class="language-markdown"><code class="language-markdown"><span class="token comment">&lt;!-- Lens {"name":"HTTP Request","id":"http-request","value":{"method":{"type":"token","at":{"astType":"Identifier","range":{"start":8,"end":11}}},"options":{"type":"object-literal","at":{"astType":"ObjectExpression","range":{"start":12,"end":14}}}},"variables":{"err":"self","response":"self","body":"self"},"containers":{"handler":"any","success":"any","error":"any"},"schema":"request","initialValue":{}} --></span>\n```javascript\nrequest.get({}, function (err, response, body) {\n  //:handler\n  if (response.statusCode >= 200 &amp;&amp; statusCode.status &lt; 300) {\n<span class="token code keyword">    //:success</span>\n  } else {\n<span class="token code keyword">    //:error</span>\n  }\n\n})\n```</code></pre>\n      </div>',timeToRead:5,excerpt:"Writing Lenses What is a lens?  - A lens can parse and mutate a specific kind of code. It can extract a JSON object representing the code…",frontmatter:{title:"Writing Lenses",cover:null,date:null,category:null,tags:null}},tableOfContents:{chapters:[{title:"What is Optic?",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/what-is-optic.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/what_is_optic/what-is-optic"},frontmatter:{title:"What Is Optic",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/another-code-generator.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/what_is_optic/another-code-generator"},frontmatter:{title:"Another Code Generator?",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/technical-overview.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/what_is_optic/technical-overview"},frontmatter:{title:"Technical Overview",type:null}}}}]},{title:"Using Optic",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/get-started.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/get-started"},frontmatter:{title:"Get Started",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/workflow.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/workflow"},frontmatter:{title:"Workflow",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/properties.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/properties"},frontmatter:{title:"Properties",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/search.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/search"},frontmatter:{title:"Search",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/transform.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/transform"},frontmatter:{title:"Transform",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/sync.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/sync"},frontmatter:{title:"Sync",type:null}}}}]},{title:"Extending Optic",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/extending-optic.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/extending-optic"},frontmatter:{title:"Extending Optic",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/writing-skills.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/writing-skills"},frontmatter:{title:"Writing Skills",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/knowledge-packages.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/knowledge-packages"},frontmatter:{title:"Knowledge Packages",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/lenses.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/writing-lenses"},frontmatter:{title:"Writing Lenses",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/transformations.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/defining-transformations"},frontmatter:{title:"Defining Transformations",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/schemas.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/defining-schemas"},frontmatter:{title:"Defining Schemas",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/publishing.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/publishing"},frontmatter:{title:"Publishing",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/adding-ides.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/adding-optic-support-for-new-id-es"},frontmatter:{title:"Adding Optic Support for new IDEs",type:null}}}}]}]},tableOfContentsSkills:{chapters:[{title:"Generate RequestJS calls for every route in an Express backend",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/skills/generate-requestjs.md absPath of file",childMarkdownRemark:{headings:[{value:"Generate RequestJS calls for every route in an Express backend",depth:1},{value:"Requirements",depth:2},{value:"Including Skills",depth:2},{value:"Our First Transform",depth:2},{value:"Generating Networking Calls from your Client Code",depth:2},{value:"Name and Source Annotations",depth:3},{value:"Syncing API & Networking Code",depth:2},{value:"Going Further",depth:2}],fields:{slug:"/skills/generate-request-js-calls-for-every-route-in-an-express-backend"},frontmatter:{title:"Generate RequestJS calls for every route in an Express backend",type:"skill"}}}}]}]}},pathContext:{slug:"/docs/authoring/writing-lenses",type:null}}}});
//# sourceMappingURL=path---docs-authoring-writing-lenses-fcf26839e76eccb7a0f9.js.map