<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Automate Routine Programming]]></title><description><![CDATA[Automate routine programming.  Optic is an open source project that brings smart code gen to your favorite IDEs.]]></description><link>https://useoptic.com</link><image><url>https://useoptic.com/logos/logo-512.png</url><title>Automate Routine Programming</title><link>https://useoptic.com</link></image><generator>GatsbyJS Material Starter</generator><lastBuildDate>Sat, 04 Aug 2018 04:36:25 GMT</lastBuildDate><atom:link href="https://useoptic.com/rss.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Optic Team]]></author><copyright><![CDATA[Copyright © 2017. Optic]]></copyright><item><title><![CDATA[Generate Express CRUD Routes from a Mongoose Model]]></title><description><![CDATA[Generate Express CRUD Routes from a Mongoose Model CRUD might be the most aptly named acronym in programming jargon. Short for Create, Read…]]></description><link>https://useoptic.com/skills/generate-express-crud-routes-from-a-mongoose-model</link><guid isPermaLink="false">https://useoptic.com/skills/generate-express-crud-routes-from-a-mongoose-model</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;generate-express-crud-routes-from-a-mongoose-model&quot;&gt;&lt;a href=&quot;#generate-express-crud-routes-from-a-mongoose-model&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generate Express CRUD Routes from a Mongoose Model&lt;/h1&gt;
&lt;p&gt;CRUD might be the most aptly named acronym in programming jargon. Short for Create, Read, Update, Delete; CRUD is arguably the most routine part of backend development.&lt;/p&gt;
&lt;p&gt;In this tutorial we are going to configure Optic to automatically generate/maintain the CRUD routes in our backend.&lt;/p&gt;
&lt;h2 id=&quot;requirements&quot;&gt;&lt;a href=&quot;#requirements&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Node backend&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; REST API&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mongoosejs.com/&quot;&gt;Mongoose&lt;/a&gt; MongoDB + Mongoose&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&apos;ve included the source in a demo todo app project to make it easy to try this out. &lt;a href=&quot;https://github.com/opticdev/optic-demo-project&quot;&gt;Download it here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;including-skills&quot;&gt;&lt;a href=&quot;#including-skills&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Including Skills&lt;/h2&gt;
&lt;p&gt;To get started we need to include some basic Javascript skills maintained by the Optic team. You can do this by updating the &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file in your project&apos;s root directory.&lt;/p&gt;
&lt;p&gt;We&apos;ll be adding 3 skill packages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;optic:rest&lt;/code&gt; - Contains the common schemas for endpoints, parameters, headers, and responses.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;optic:express-js&lt;/code&gt; - The skills used for interfacing with express routes&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;optic:mongoose&lt;/code&gt; - Skills for interfacing with mongoose queries, schemas and models.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once added, your updated &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file should look something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Mongoose CRUD Demo

&lt;span class=&quot;token key atrule&quot;&gt;parsers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; es7

&lt;span class=&quot;token key atrule&quot;&gt;skills&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; optic&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;js@0.3.0
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; optic&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;rest@0.3.0
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; optic&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;requestjs@0.3.0
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; optic&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;mongoose@0.3.0

&lt;span class=&quot;token key atrule&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node_modules&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Once you&apos;ve updated your &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file you can start up your favorite IDE and Optic to get started.&lt;/p&gt;
&lt;h2 id=&quot;our-first-transform&quot;&gt;&lt;a href=&quot;#our-first-transform&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Our First Transform&lt;/h2&gt;
&lt;p&gt;Because you have included the &lt;code class=&quot;language-text&quot;&gt;optic:mongoose&lt;/code&gt; skill in your Optic configuration Optic can now read every mongoose model in your project.&lt;/p&gt;
&lt;p&gt;Add the following todo model definition in your app. When you select this code, Optic will light up. Open Optic by clicking on the glowing dot or CMD+Tab to the app.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ToDo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Todo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Schema&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  task&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;string&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  isDone&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;boolean&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;You&apos;ll see that Optic interprets the above code as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ToDo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;schema&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;task&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;isDone&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;boolean&quot;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Because mongoose schema definitions are so verbose it isn&apos;t difficult to see how Optic extracted this model from the raw source code.&lt;/p&gt;
&lt;p&gt;In most CRUD generators you have to provide a Swagger description of all your models/routes or manually outline all the models, properties and relationships in your database using a CLI. Because Optic can read your code on its own it can generate your CRUD routes by using your code as the input.&lt;/p&gt;
&lt;p&gt;This makes Optic easier to use and much more flexible than a one-shot code generator. There&apos;s also the advantage of being able to have Optic update the generated CRUD routes whenever your schemas are changed.&lt;/p&gt;
&lt;p&gt;Now let&apos;s apply a transformation to turn this model into a request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A transformation is a pure function that takes a JSON object that conforms to Schema A as input and returns a JSON object that conforms to Schema B.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case our transformation takes the JSON object above that represents a mongoose model and returns a JSON Object that represents a CRUD endpoint with a query inside.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put your cursor over the todo model&lt;/li&gt;
&lt;li&gt;Go to the transformations tab within Optic&apos;s GUI (the blue plus button at the bottom).&lt;/li&gt;
&lt;li&gt;Click on the transformation called &quot;Create Route&quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following code will appear beneath your model:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/todo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;//name: Create Todo Route, source: Todo Model -&gt; optic:mongoose/createroutefromschema {}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ToDo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; task&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;task&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isDone&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isDone &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;//tag: query&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;As you can see Optic has created a post route to &lt;code class=&quot;language-text&quot;&gt;/todo&lt;/code&gt; that accepts a JSON body with a &lt;code class=&quot;language-text&quot;&gt;task&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;isDone&lt;/code&gt; parameter. Within the handler for that route Optic creates a query that creates and saves a new instance of ToDo in the database.&lt;/p&gt;
&lt;p&gt;Now try generating the other CRUD Routes using the available transformations in the mongoose skill.&lt;/p&gt;
&lt;p&gt;^Remember: Since you&apos;re using Optic you can edit the generated code to add your own custom responses, errors and validation. Optic will still be able to help you maintain it over time.&lt;/p&gt;
&lt;h2 id=&quot;naming-code-objects&quot;&gt;&lt;a href=&quot;#naming-code-objects&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Naming Code Objects&lt;/h2&gt;
&lt;p&gt;Generating CRUD routes like this is very useful, but to take full advantage of Optic&apos;s power we need to start recording the relationships between our models and the CRUD routes we generate.&lt;/p&gt;
&lt;p&gt;We can do this by adding a name annotation to our mongoose model.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ToDo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Todo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Schema&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//name: Todo Model&lt;/span&gt;
  task&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;string&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  isDone&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;boolean&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now when you generate a CRUD route it&apos;ll have a source annotation indicating that it&apos;s the result of &quot;Todo Model&quot; being transformed.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/todo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;//source: Todo Model -&gt; optic:mongoose/createroutefromschema {}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ToDo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; task&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;task&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isDone&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isDone &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;//tag: query&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3 id=&quot;name-and-source-annotations&quot;&gt;&lt;a href=&quot;#name-and-source-annotations&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Name and Source Annotations&lt;/h3&gt;
&lt;p&gt;One of Optic&apos;s key design principles is making code the ultimate source of truth. We don&apos;t want to hide any information from the end user so when it comes to storing relationships between different sections of code we&apos;ve elected to use annotations.&lt;/p&gt;
&lt;p&gt;There are two kinds of annotations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Name Annotations&lt;/strong&gt; assign a name to a section of code. This provides a developer friendly way of referencing the models Optic finds in your code. There&apos;s a single project level namespace for these names so it&apos;s important to make them unique. {Name} + {Type} ie &quot;Create User Endpoint&quot; is a good pattern to follow&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Source Annotations&lt;/strong&gt; record the model and the transformation used to generate this section of code.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;syncing-models--crud-routes&quot;&gt;&lt;a href=&quot;#syncing-models--crud-routes&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Syncing Models &amp;#x26; CRUD Routes&lt;/h2&gt;
&lt;p&gt;No matter how well you plan your database, changes will need to be made to your schemas and CRUD routes. Traditional code generators are no help here, but since Optic can both read/write code you can use it maintain the generated code over time.&lt;/p&gt;
&lt;p&gt;Remember all those name and source annotations? Optic uses those to create a acyclic graph representing the internal dependencies of your code. Each named object becomes a node and the source annotations become edges between them. When you press &quot;Sync&quot; in Optic it will diff the graph representing your current code base with the expected graph.&lt;/p&gt;
&lt;p&gt;To see how this works let&apos;s add a &lt;code class=&quot;language-text&quot;&gt;dueDate&lt;/code&gt; field to our Todo model.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ToDo &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Todo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;mongoose&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Schema&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//name: Todo Model&lt;/span&gt;
  task&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;string&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  isDone&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;boolean&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  dueDate&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;date&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Head over to the Optic GUI and click &quot;Sync&quot;. Optic will generate a patch for your CRUD routes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/acunniffe/optic-crud-demo/blob/master/readme-images/patch.png?raw=true&quot; alt=&quot;Image of Patch&quot;&gt;&lt;/p&gt;
&lt;p&gt;The new CRUD route should look like this. Notice how it only changed the line of the query to add the new field. Any custom code you wrote in the handler is left alone during a sync.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/todo&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;//source: Todo Model -&gt; optic:mongoose/createroutefromschema {}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ToDo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; task&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;task&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; isDone&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isDone&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dueDate&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dueDate &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;//tag: query&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Click &quot;Apply&quot; and patches will be applied and written to disk.&lt;/p&gt;
&lt;h2 id=&quot;going-further&quot;&gt;&lt;a href=&quot;#going-further&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Going Further&lt;/h2&gt;
&lt;p&gt;If you want to use another database, ORM or REST API library you can learn more about teaching Optic to work with new types of code in our &lt;a href=&quot;https://useoptic.com/docs&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also have a tutorial for &lt;a href=&quot;https://github.com/acunniffe/optic-networking-code-demo&quot;&gt;syncing your client networking code with the routes in your backend&lt;/a&gt;. Now that you&apos;ve learned how to  generate all your CRUD routes it might be worth checking out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading! We hope this tutorial helps you get your apps off the ground quickly!&lt;/strong&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Generate RequestJS calls for every route in an Express backend]]></title><description><![CDATA[Generate RequestJS calls for every route in an Express backend Consuming REST APIs, even your own, is no walk in the park. It can take many…]]></description><link>https://useoptic.com/skills/generate-request-js-calls-for-every-route-in-an-express-backend</link><guid isPermaLink="false">https://useoptic.com/skills/generate-request-js-calls-for-every-route-in-an-express-backend</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;generate-requestjs-calls-for-every-route-in-an-express-backend&quot;&gt;&lt;a href=&quot;#generate-requestjs-calls-for-every-route-in-an-express-backend&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generate RequestJS calls for every route in an Express backend&lt;/h1&gt;
&lt;p&gt;Consuming REST APIs, even your own, is no walk in the park. It can take many iterations to get the inputs passing correctly and you may find yourself shooting in the dark if the endpoints aren&apos;t properly documented.&lt;/p&gt;
&lt;p&gt;In this tutorial we are going to configure Optic to automatically generate/maintain the networking code used to connect to an Express API. First Optic will read the source code and construct a representation of all the endpoints in the API. Then Optic transforms those endpoints into HTTP requests on the client.&lt;/p&gt;
&lt;h2 id=&quot;requirements&quot;&gt;&lt;a href=&quot;#requirements&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Isomorphic Node backend/frontend in a monorepo&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; REST API&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/request/request&quot;&gt;Request&lt;/a&gt; as the client networking library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&apos;ve included the source in a demo project to make it easy to try this out. &lt;a href=&quot;https://github.com/acunniffe/optic-networking-code-demo&quot;&gt;Download it here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;including-skills&quot;&gt;&lt;a href=&quot;#including-skills&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Including Skills&lt;/h2&gt;
&lt;p&gt;To get started we need to include some basic Javascript skills maintained by the Optic team. You can do this by updating the &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file in your project&apos;s root directory.&lt;/p&gt;
&lt;p&gt;We&apos;ll be adding 3 skill packages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;optic:rest&lt;/code&gt; - Contains the common schemas for endpoints, parameters, headers, and responses.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;optic:express-js&lt;/code&gt; - The skills used for interfacing with express routes&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;optic:requestjs&lt;/code&gt; - Skills for interfacing with HTTP requests. Also contains the transformation from endpoint to request.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once added, your updated &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file should look something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Networking Code Demo

&lt;span class=&quot;token key atrule&quot;&gt;parsers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; es7

&lt;span class=&quot;token key atrule&quot;&gt;skills&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; optic&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;js@0.3.0
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; optic&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;rest@0.3.0
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; optic&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;requestjs@0.3.0

&lt;span class=&quot;token key atrule&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node_modules&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Once you&apos;ve updated your &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file you can start up your favorite IDE and Optic to get started.&lt;/p&gt;
&lt;h2 id=&quot;our-first-transform&quot;&gt;&lt;a href=&quot;#our-first-transform&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Our First Transform&lt;/h2&gt;
&lt;p&gt;Because you have included the &lt;code class=&quot;language-text&quot;&gt;optic:express-js&lt;/code&gt; skill in your Optic configuration Optic can now read every express route in your project.&lt;/p&gt;
&lt;p&gt;Add the following demo endpoint anywhere in your project or use one of your own to try Optic out on real data. When you select this code, Optic will light up. Open Optic by clicking on the glowing dot or CMD+Tab to the app.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello &apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;You&apos;ll see that Optic interprets the above code as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;parameters&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;responses&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Pretty cool! It auto documented the structure of the endpoint without any annotations or guidance.&lt;/p&gt;
&lt;p&gt;Now let&apos;s apply a transformation to turn this endpoint into a request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A transformation is a pure function that takes a JSON object that conforms to Schema A as input and returns a JSON object that conforms to Schema B.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this case our transformation takes the JSON object above that represents an endpoint and returns a similar JSON object that represents a HTTP request.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go to the transformations tab within Optic&apos;s GUI (the blue plus button at the bottom).&lt;/li&gt;
&lt;li&gt;Click on the transformation called &quot;Request From Route&quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following code will appear beneath your endpoint:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; uri&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; qs&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Optic has generated an HTTP Request by using its interpretation of the Route as input.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember: Since you&apos;re using Optic you can edit the generated code and Optic will still be able to help you maintain it over time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;generating-networking-calls-from-your-client-code&quot;&gt;&lt;a href=&quot;#generating-networking-calls-from-your-client-code&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Generating Networking Calls from your Client Code&lt;/h2&gt;
&lt;p&gt;The above example is great when you&apos;re exploring Optic, but it isn&apos;t very practical to generate networking code on the server when it&apos;s really needed in the client.&lt;/p&gt;
&lt;p&gt;Before we do that, update your endpoint to include one of Optic&apos;s name annotations (more on those soon).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//name: Hello World Endpoint&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello &apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Then open any file in your client and use &lt;code class=&quot;language-text&quot;&gt;///&lt;/code&gt; to start an Optic search. Type in the name of the transformation we just used.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;///Request from Route&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This time when you click the transformation it&apos;s going to ask you to select a route. In the dropdown you&apos;ll see one option for the &lt;code class=&quot;language-text&quot;&gt;Hello World Endpoint&lt;/code&gt; (hint: we just named this). If you select this option and hit &quot;Apply&quot; Optic will transform the route and insert the code in the current file.&lt;/p&gt;
&lt;p&gt;Notice that Optic has added a source annotation that records the name of the model this code was generated from and the internal id of the transformation used.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; uri&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; qs&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//source: Hello World Endpoint -&gt; optic:requestjs/requestFromRoute {}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3 id=&quot;name-and-source-annotations&quot;&gt;&lt;a href=&quot;#name-and-source-annotations&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Name and Source Annotations&lt;/h3&gt;
&lt;p&gt;One of Optic&apos;s key design principles is making code the ultimate source of truth. We don&apos;t want to hide any information from the end user so when it comes to storing relationships between different sections of code we&apos;ve elected to use annotations.&lt;/p&gt;
&lt;p&gt;There are two kinds of annotations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Name Annotations&lt;/strong&gt; assign a name to a section of code. This provides a developer friendly way of referencing the models Optic finds in your code. There&apos;s a single project level namespace for these names so it&apos;s important to make them unique. {Name} + {Type} ie &quot;Create User Endpoint&quot; is a good pattern to follow&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Source Annotations&lt;/strong&gt; record the model and the transformation used to generate this section of code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A single section of code can have both a name and a source annotation. For instance you can have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An Endpoint named &quot;Hello World Endpoint&quot;&lt;/li&gt;
&lt;li&gt;A Request named &quot;Hello World Request&quot;, that has the source &quot;Hello World Endpoint&quot;&lt;/li&gt;
&lt;li&gt;An HTML form with source &quot;Hello World Request&quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you were to update the &quot;Hello World Endpoint&quot; Optic would update the request and form to correspond with the new structure of the endpoint.&lt;/p&gt;
&lt;h2 id=&quot;syncing-api--networking-code&quot;&gt;&lt;a href=&quot;#syncing-api--networking-code&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Syncing API &amp;#x26; Networking Code&lt;/h2&gt;
&lt;p&gt;Every API changes which means your networking code will need to change as well. Traditional code generators are no help here, but since Optic can both read/write code you can use it maintain this generated code over time.&lt;/p&gt;
&lt;p&gt;Remember all those name and source annotations? Optic uses those to create a acyclic graph representing the internal dependencies of your code. Each named model becomes a node and the source annotations become edges between them. When you press &quot;Sync&quot; in Optic it will diff the graph representing your current code base with the expected graph.&lt;/p&gt;
&lt;p&gt;To see how this works let&apos;s first add some custom code to our request. For now I&apos;m just going to replace the generated callback with a &lt;code class=&quot;language-text&quot;&gt;console.log&lt;/code&gt; of the response but you can put any custom code here.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; uri&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; qs&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; name &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//source: Hello World Endpoint -&gt; optic:requestjs/requestFromRoute {}&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now let&apos;s go back to the endpoint and add a &lt;code class=&quot;language-text&quot;&gt;lastName&lt;/code&gt; query parameter and change &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; to &lt;code class=&quot;language-text&quot;&gt;firstName&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//name: Hello World Endpoint&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;firstName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Head over to the Optic GUI and click &quot;Sync&quot;. Optic will generate a patch for your request.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/acunniffe/optic-networking-code-demo/raw/master/readme-images/example-sync.gif&quot; alt=&quot;Image of Sync&quot;&gt;&lt;/p&gt;
&lt;p&gt;The new request should look like this. Notice how it only updated the query string and did not overwrite your custom code.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; uri&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/hello&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; qs&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; firstName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; firstName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastName&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; lastName &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//source: Hello World Endpoint -&gt; optic:requestjs/requestFromRoute {}&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Click &quot;Apply&quot; and patches will be applied and written to disk.&lt;/p&gt;
&lt;h2 id=&quot;going-further&quot;&gt;&lt;a href=&quot;#going-further&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Going Further&lt;/h2&gt;
&lt;p&gt;If you want to use another client networking or REST API library you can learn more about teaching Optic to work with new types of code in our &lt;a href=&quot;https://useoptic.com/docs&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&apos;re currently experimenting with making all of this work cross project (instead of just in monorepos) and cross language (Python backend w/ JS frontend). If you&apos;re interested in trying out those features email &lt;a href=&quot;mailto:aidan@useoptic.com&quot;&gt;aidan@useoptic.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading! I hope this saves you a lot of time and headaches.&lt;/strong&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Technical Overview]]></title><description><![CDATA[What Am I Running? When you start the Optic App, an Optic Server and the Optic UI start at the same time. The Optic Server monitors the…]]></description><link>https://useoptic.com/docs/what_is_optic/technical-overview</link><guid isPermaLink="false">https://useoptic.com/docs/what_is_optic/technical-overview</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;what-am-i-running&quot;&gt;&lt;a href=&quot;#what-am-i-running&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What Am I Running?&lt;/h1&gt;
&lt;p&gt;When you start the Optic App, an Optic Server and the Optic UI start at the same time. The Optic Server monitors the files in a repository and keeps an up to date record of all the entities it finds in your code. To be clear, this server is a local, and none of your code ever leaves your machine during processing.&lt;/p&gt;
&lt;p&gt;Optic servers also listen for state changes from editors like Atom, Intellij and Vim. Those editors are constantly sending their state (cursor position and staged contents) to the server using a websocket. When results are found by the server those are forwarded to Optic’s UI.&lt;/p&gt;
&lt;p&gt;Users can interact with the Optic API through the UI we provide. When you submit changes to the server they are processed and then forwarded back to the editors and written to the file system.&lt;/p&gt;
&lt;p&gt;When you reference a knowledge package that cannot be resolved locally, Optic will try to load it from its central registry. Other than that and some bug logging, no remote resources are called.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/system-overview.svg&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;code-as-information-repos-as-apis&quot;&gt;&lt;a href=&quot;#code-as-information-repos-as-apis&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code as Information, Repos as APIs&lt;/h1&gt;
&lt;p&gt;Generating, parsing and mutating source code are hard problems. We designed away the cognitive load of code generation and replaced it with a simpler interface for manipulating code. One of our earliest shifts in mindset was to start thinking about code as information.&lt;/p&gt;
&lt;p&gt;What do we mean by “code as information”? Take a simple route that has a query parameter called &lt;code class=&quot;language-text&quot;&gt;name&lt;/code&gt; and returns the string &lt;code class=&quot;language-text&quot;&gt;Hello {name}&lt;/code&gt;. There are a variety approaches, libraries, and even languages we could write that in. All these representations have different data (strings), but the information content in terms of a REST Route are the same. We are looking for the high level concepts like routes, requests, forms, and validation that exist outside of any one kind of code.&lt;/p&gt;
&lt;p&gt;Data:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.get(‘/hello’, function (req, res) {
	res.send(200, `Hello ${req.query.name}`)
})&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Information:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‘/hello’&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‘get’&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	parameters&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		in&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‘query’&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‘name’
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	responses&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		code&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		type&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ‘string’
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;In Optic, these descriptions of underlying code always conform to a Schema and can be represented by JSON. When Optic reads a code base, it is looking for descriptions like the one above for any code that it has been trained to interpret.&lt;/p&gt;
&lt;p&gt;When you make changes to the descriptions and send them back to Optic, the system  automatically figures out how to update the raw source code to match the new description. The capability to patch AST Trees without destroying formatting or user changes is learned for each programming language with our machine learning toolkit &lt;a href=&quot;https://github.com/opticdev/marvin&quot;&gt;Marvin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/put-change.gif&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;All of this is done over an API that Optic exposes for every repository it is watching. You can query for specific entities (routes, pages, forms, models, etc), post new descriptions, and put changes to specific sections of code that Optic understands. We use these APIs to power the Optic Agent.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In summary&lt;/strong&gt;, Optic provides an interface to manipulate source code with JSON descriptions. Developers who are authoring content for Optic or building on top of our APIs don’t need to think about the challenges of traditional code generation.&lt;/p&gt;
&lt;h1 id=&quot;performance&quot;&gt;&lt;a href=&quot;#performance&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Performance&lt;/h1&gt;
&lt;p&gt;Optic’s performance has been tested with projects of various sizes. We’ve done most of our testing on a 2014 MacBook Pro running a Core I5 processor clocked at 2.6 GHZ. Typically the Optic server will idle around 1% of a CPU Core. When you are actively typing in new code it will rev up to 20-30% of a core, which is about what most Text Editors run at during data entry.&lt;/p&gt;
&lt;p&gt;When you stop typing and start compiling or running your code, Optic will idle, so its computations will not slow down your testing.&lt;/p&gt;
&lt;p&gt;There are a few expensive tasks Optic performs sporadically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first is the initial run at indexing your entire project. This can take upwards of 30 seconds depending on the total number of lines of code.&lt;/li&gt;
&lt;li&gt;Generating sync patches is fairly expensive as well and can take between 5 and 20 seconds based on the size of your project. This action is user triggered.&lt;/li&gt;
&lt;li&gt;The third is the “Building Knowledge” phase. This is when Optic collects all your Optic Knowledge and compiles them into small, fast parsers and mutators. This only happens when you change your your &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file and typically lasts 2-15 seconds depending on the number of dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you run into performance issues we will do our best to correct them ASAP. You can add an issue on &lt;a href=&quot;https://github.com/opticdev/optic/issues/new&quot;&gt;our core repo&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Another Code Generator?]]></title><description><![CDATA[Optic: Not Just Another Code Generator Traditional code generators have a major technical limitation: they only work in one direction. This…]]></description><link>https://useoptic.com/docs/what_is_optic/another-code-generator</link><guid isPermaLink="false">https://useoptic.com/docs/what_is_optic/another-code-generator</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;optic-not-just-another-code-generator&quot;&gt;&lt;a href=&quot;#optic-not-just-another-code-generator&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optic: Not Just Another Code Generator&lt;/h1&gt;
&lt;p&gt;Traditional code generators have a major technical limitation: they only work in one direction. This means they can only be used once and any addition, no matter how small, will break the ability to use that code generator again. &lt;/p&gt;
&lt;p&gt;These limitations are inconsequential when building compilers or tools for generating scaffolding, but they have handicapped most attempts to bring larger code generating projects mainstream. &lt;/p&gt;
&lt;h1 id=&quot;optic-is-different&quot;&gt;&lt;a href=&quot;#optic-is-different&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optic is Different&lt;/h1&gt;
&lt;p&gt;Optic can read both your existing code and even modified generated code. It achieves this using machine learning to model the structure of programming languages and do complex pattern matching against code.&lt;/p&gt;
&lt;p&gt;Because Optic can read and generate code, it is far more useful than any past code generator. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Optic can transform one kind of code into another, for instance a route into a form. The inputs don’t need to be specified when doing this because Optic can pull them from the code. &lt;/li&gt;
&lt;li&gt;Optic can sync your code. It creates a graph of all the parts of your code that relate to each other, and when one is changed, it automatically updates the others. Add a field to a table, for instance, and the routes, forms, and networking code will update. &lt;/li&gt;
&lt;li&gt;It works with existing code and can be used throughout the entire lifecycle of a project. &lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;reformulating-the-code-generator&quot;&gt;&lt;a href=&quot;#reformulating-the-code-generator&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reformulating the Code Generator&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;How we turned a parser into a code generator &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At Optic we have reimagined the code generator. Historically, of these projects are a bunch of one-way functions called generators. These generators maps an input into a string or an AST Tree. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Generator(Model) -&amp;gt; Code&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Most tools stop there and a) focus on neatly fitting into the compilation pipeline, b) extending their generators with plugins, or c) telling users to take over management of the generated code. &lt;/p&gt;
&lt;p&gt;Those who take on the round-trip problem&lt;sup&gt;1&lt;/sup&gt; head on try and fail to build a generator and a parser that can read that code back into a model compatible with that generator. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Generator(Model) -&amp;gt; Code + Parser(code) -&amp;gt; Model&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This road does not lead anywhere fruitful. The round trip problem cannot be beaten, so it must be designed around.&lt;/p&gt;
&lt;h1 id=&quot;code-as-the-source-of-truth&quot;&gt;&lt;a href=&quot;#code-as-the-source-of-truth&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Code as the Source of Truth&lt;/h1&gt;
&lt;p&gt;When we set out to create a code generator programmers could collaborate with, it become obvious that traditional code generators had things backwards. These tools made their internal models the source of truth and then output code. Code generators are not useful if their input is more complicated than their output, so internal models tend to represent a subset of the functionality within their target programming languages. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Model ⊂ Target Language&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;This further complicates the round-trip problem. Intuitively it makes sense that the model can be expanded into a larger representation, but it is not at all apparent how one would express richness of the target in a subset of itself. &lt;/p&gt;
&lt;p&gt;Programmers end up getting very unhappy when their needs outgrow the model. They know if they make manual changes they cannot use the tool anymore, but they also realize that they’ve gone beyond what the tool can do. The tool builder either acknowledges the futility of the problem and elects to makes a small niche code generator, or they try to build something so powerful “you never need to touch the code”...good luck. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The solution is to make the code the absolute source of truth. This acknowledges the reality that, no matter how good our tools get, we will still need programmers to do some heavy lifting. Making the code the source of truth allows programmers to do that work, natively, in the abstraction most suited for it. &lt;/p&gt;
&lt;p&gt;In other words, instead of automating a few use cases well and making it impossible to code anything else, we choose to let you code anything you want while we automate a few use cases well. &lt;/p&gt;
&lt;h1 id=&quot;a-new-equation&quot;&gt;&lt;a href=&quot;#a-new-equation&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;A New Equation&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;The Parser:&lt;/strong&gt; If code is the source of truth, the focus moves from generating code to understanding the code that is already there. We do this by representing sections of code as ad-hoc models. As it parses code that defines a Rest Route, Optic pulls out the key values and creates a model that holds the URL, method, parameters, headers and response types. We can use this same ad-hoc model for Express, Spring, Flask, and other rest libraries across every language. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Mutator:&lt;/strong&gt; Once we have built a system capable of loosely reading code and pattern matching models, we can present those models to be edited in any way we like. If changes are made to that model, Optic patchs the original code, so it matches the updates. That patching is key. Because we have a parser and we know what our new code should parse as, we can do multiple passes until we get it right. With this feedback signal we can use ML to learn the best patches to suggest over time. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Parser(code) -&amp;gt; Model + Mutator(oldCode, model, newModel) -&amp;gt; newCode&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Now the big reveal: Instead of being based on Generators, Optic is the marriage of a Parser and a Mutator. If we can read code of a certain type and then mutate that section to express a new value, we have effectively bootstrapped a generator. But unlike traditional generators, ours will not erase your manual changes, comments, or other work a programmer has done. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Generator == Parser + Mutator&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2 id=&quot;bottom-up-not-top-down&quot;&gt;&lt;a href=&quot;#bottom-up-not-top-down&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bottom Up, Not Top Down&lt;/h2&gt;
&lt;p&gt;Because Optic is based on parsing and mutation instead of generation, it builds its representation of code from the bottom up. This breaks with the monolithic mega-abstractions large code generators employ.&lt;/p&gt;
&lt;p&gt;Ad-hoc models with well defined responsibilities are easier to reason about and greatly simplify Optic. If you ask Optic to write a Create Route for one of your models it will tie together a routing library and whatever DB driver you’re using to write a section of code like this: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.post(‘/user’, function (req, res) {
  new User({ 
   firstName: req.body.firstName,
   lastName: req.body.lastName,
   email: req.body.email,
   age: req.body.age }).save((err, item) =&amp;gt; {
    if (!err) {
        res.send(200, item)
    } else {
        res.send(400, err)
    }
  })
})&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;If you then ask Optic to write a form for this route, Optic looks at the route and figures out what parameters need to be collected in the form. It does not care if you edit the query, delete it, or add some validation code above it. It elects to interpret that section of code as a Route so it pulls out only what it needs to know. This is what makes Optic so flexible and adaptive, and it is something that’s really difficult to emulate if you’re relying on a top-down, monolithic, abstraction. &lt;/p&gt;
&lt;h2 id=&quot;the-code&quot;&gt;&lt;a href=&quot;#the-code&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Code&lt;/h2&gt;
&lt;p&gt;Optic is an Open Source project. If you’re interested in contributing or just checking out our code head over to our &lt;a href=&quot;https://github.com/opticdev&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/opticdev/optic&quot;&gt;optic&lt;/a&gt; - our core engine&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/opticdev/optic-markdown&quot;&gt;optic-markdown&lt;/a&gt; - a spec for human and machine readable docs (how Optic learns new kinds of code)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/opticdev/marvin&quot;&gt;marvin&lt;/a&gt; - Learn the structure of a programming language from examples. &lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
## Footnotes
### The Round-Trip Problem
Round tripping models is practically impossible. Imagine two simple models for `Dog` and `Pet`. They are similar, so you’d think it would be easy to go back and forth, but immediately complications present themselves. 
&lt;p&gt;Dog: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;name: String = Buster 
color: Color = Brown
length: Inches = 37
width: Inches = 17
breed: Enum = Beagle
birthday: Date = 3/11/2014&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Pet: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;petName: String 
ownerName: String 
color: Color
length: Centimeters
species: Enum
age: Int&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Converting Dog -&gt; Pet (Failed)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;petName = Buster    -- mapping of name -&amp;gt; petName
ownerName = ???     -- not found
color = Brown       -- copied 
length = 93.98      -- length * 2.54
species = Dog       -- getClass().name
age = 4             -- Current Year - birthday.year&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Fail one way: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Required information in target can not be copied or computed. Example: &lt;code class=&quot;language-text&quot;&gt;ownerName&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Can be round-tripped: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mapping from property A -&gt; B. Example &lt;code class=&quot;language-text&quot;&gt;petName&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mapping from property A &amp;#x3C;-(function)-&gt; B with a reversible function. Example &lt;code class=&quot;language-text&quot;&gt;length&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Work one way, but non-reversible: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mapping from property A -(function)&gt; B. Example &lt;code class=&quot;language-text&quot;&gt;birthday&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;age&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now imagine trying to get this to work for a model complicated enough to describe how an application is supposed to function&lt;/p&gt;</content:encoded></item><item><title><![CDATA[What Is Optic]]></title><description><![CDATA[What is Optic? Optic is a programming assistant that automates routine programming. Optic can be configured to write and maintain any of the…]]></description><link>https://useoptic.com/docs/what_is_optic/what-is-optic</link><guid isPermaLink="false">https://useoptic.com/docs/what_is_optic/what-is-optic</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;what-is-optic&quot;&gt;&lt;a href=&quot;#what-is-optic&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What is Optic?&lt;/h1&gt;
&lt;p&gt;Optic is a programming assistant that automates routine programming. Optic can be configured to write and maintain any of the routine code in your project so developers can focus their efforts on the most important &amp;#x26; novel parts.&lt;/p&gt;
&lt;p&gt;Optic is your collaborator. It is there to help you with what it can, but it leaves the heavy duty coding to real programmers. You will find that working with Optic is a lot like having another programmer around who helps with the boring stuff.&lt;/p&gt;
&lt;h1 id=&quot;whats-the-goal&quot;&gt;&lt;a href=&quot;#whats-the-goal&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What’s the Goal?&lt;/h1&gt;
&lt;p&gt;We want to help our fellow developers do the best work of their lives. You are much more likely to do your best work when the board is cleared of the trivial tasks that pull you away from deep, important work. We believe narrow AIs, like Optic, can augment individuals and their teams and make everyone happier and more productive.&lt;/p&gt;
&lt;h1 id=&quot;can-i-use-optic&quot;&gt;&lt;a href=&quot;#can-i-use-optic&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Can I use Optic?&lt;/h1&gt;
&lt;p&gt;Optic can read your existing code and even generated code that has been modified. It achieves this using machine learning to model the structure of programming languages and do complex pattern matching against code. This means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Optic works with existing code:&lt;/strong&gt; You don’t need throw out everything to reap the benefits of automation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You can use Optic forever:&lt;/strong&gt; It is not just for scaffolding and provides value long term.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Optic works with the most popular IDEs. Our community has built plugins for Atom, VSCode, Sublime, and all the JetBrains products.&lt;/p&gt;
&lt;p&gt;Optic processes all the code locally and none of your code ever leaves the machine. This should make it safe to try in most corporate environments.&lt;/p&gt;
&lt;p&gt;Currently Optic is &lt;strong&gt;Mac Only&lt;/strong&gt; Windows &amp;#x26; Linux Coming Soon.&lt;/p&gt;
&lt;h1 id=&quot;can-i-stop-using-optic&quot;&gt;&lt;a href=&quot;#can-i-stop-using-optic&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Can I stop using Optic?&lt;/h1&gt;
&lt;p&gt;We have made Optic as technically un-sticky as possible. There are zero dependencies and absolutely no lock-in. All Optic does is read your code and help you generate and maintain sections of it. If you turn off Optic it is like it was never there.&lt;/p&gt;
&lt;p&gt;We hope Optic makes your life easier and that will keep you onboard for the long haul.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Properties]]></title><description><![CDATA[Properties Panel The properties panel is the first panel within Optic’s GUI. It presents Optic’s current interpretation of the code you are…]]></description><link>https://useoptic.com/docs/using/properties</link><guid isPermaLink="false">https://useoptic.com/docs/using/properties</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;properties-panel&quot;&gt;&lt;a href=&quot;#properties-panel&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Properties Panel&lt;/h1&gt;
&lt;p&gt;The properties panel is the first panel within Optic’s GUI. It presents Optic’s current interpretation of the code you are editing.&lt;/p&gt;
&lt;p&gt;A. &lt;strong&gt;Interpretation Bar&lt;/strong&gt; - Displays the type of code Optic thinks you are editing (i.e. Route, Form, DB Query). If the same section of code has multiple interpretations, you can use the interpretation bar to switch between them as needed.&lt;/p&gt;
&lt;p&gt;B. &lt;strong&gt;Properties Editor&lt;/strong&gt; - Displays the current properties of this object in code. You can edit them in the GUI, and Optic will update the underlying code to match your changes.&lt;/p&gt;
&lt;p&gt;C. &lt;strong&gt;Sync Controls&lt;/strong&gt; - Displays the relationships this section of code has with others. If you click “Sync,” Optic will generate a patch to sync your code if needed.&lt;/p&gt;
&lt;p&gt;D. &lt;strong&gt;Tab Bar&lt;/strong&gt; - Allows you to Switch between Properties and Search Panels.&lt;/p&gt;
&lt;p&gt;E. &lt;strong&gt;The Eye&lt;/strong&gt; - Blue when Optic recognizes an object in your code, clear when there are no results.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/properties.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;making-changes&quot;&gt;&lt;a href=&quot;#making-changes&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Making Changes&lt;/h3&gt;
&lt;p&gt;You can make a changes to an object in your code using Optic. Just make your updates, hit approve, and Optic will patch your code within a few milliseconds.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/put-change.gif&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Get Started]]></title><description><![CDATA[Getting Started Download Optic Optic Projects Every Optic project needs an   file in its root. This configuration file is what Optic uses to…]]></description><link>https://useoptic.com/docs/using/get-started</link><guid isPermaLink="false">https://useoptic.com/docs/using/get-started</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;getting-started&quot;&gt;&lt;a href=&quot;#getting-started&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getting Started&lt;/h1&gt;
&lt;h2 id=&quot;download-optic&quot;&gt;&lt;a href=&quot;#download-optic&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://useoptic.com/download/&quot;&gt;Download Optic&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id=&quot;optic-projects&quot;&gt;&lt;a href=&quot;#optic-projects&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optic Projects&lt;/h2&gt;
&lt;p&gt;Every Optic project needs an &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file in its root. This configuration file is what Optic uses to build its internal knowledge graph. Teams can include their conventions and any external knowledge they choose.&lt;/p&gt;
&lt;p&gt;Each &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file supports the following fields:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Required&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name 
&lt;em&gt;string&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;name of this project. Should be unique. Only one project with the same name is allowed to be open at any given time.&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;yes&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parsers 
&lt;em&gt;List[string]&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;a list of all the parsers you want to use within this project.&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;yes&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;knowledge_paths  
&lt;em&gt;List[string]&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;a list of paths in the repo that contain Optic Markdown. Any Optic Markdown found in these paths can be imported by adding its package name to the “knowledge” field (below).&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;no&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;[]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skills 
&lt;em&gt;List[string]&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;a list of all the package names and versions of Optic Knowledge you want to import. The Optic Package Manager (OPM) will check local providers first before resolving remote providers.&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;yes&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;[]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exclude 
&lt;em&gt;List[string]&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;a list of paths Optic should not watch (vendor, node_modules, etc).&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;no&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;[]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;Package names follow the format &lt;code class=&quot;language-text&quot;&gt;{author}:{name}@{version}&lt;/code&gt; (i.e. &lt;code class=&quot;language-text&quot;&gt;mycompany:authentication@03.2.2&lt;/code&gt;). We prefix package names with the author/organization’s username because there may be several users/teams that offer an approach to writing the same kind of code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Unnamed Project
&lt;span class=&quot;token key atrule&quot;&gt;parsers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; es7

&lt;span class=&quot;token key atrule&quot;&gt;knowledge_paths&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /docs

&lt;span class=&quot;token key atrule&quot;&gt;skills&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; optic&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;js@0.1.0
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; optic&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;rest@0.1.0
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; optic&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;mongoose@0.1.0

&lt;span class=&quot;token key atrule&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; vendor/&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;There are knowledge packages available for many standard libraries and it is possible to create your own to share publicly or for private use within your organization.&lt;/p&gt;
&lt;p&gt;Once you have configured your Optic project, it is time to get into the code.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Search]]></title><description><![CDATA[Search Panel The search panel allows you to generate new code & transform one kind of code into another.  Searching Optic allows you to…]]></description><link>https://useoptic.com/docs/using/search</link><guid isPermaLink="false">https://useoptic.com/docs/using/search</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;search-panel&quot;&gt;&lt;a href=&quot;#search-panel&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Search Panel&lt;/h1&gt;
&lt;p&gt;The search panel allows you to generate new code &amp;#x26; transform one kind of code into another. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/search.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;searching&quot;&gt;&lt;a href=&quot;#searching&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Searching&lt;/h3&gt;
&lt;p&gt;Optic allows you to search directly from your IDE. Create a new line and start typing your query. The IDE plugin will stream your search to Optic automatically.&lt;/p&gt;
&lt;p&gt;Just prefix your query with a triple ‘///‘&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;///Your query here&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Hit Enter to select the result you want to use. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Sync]]></title><description><![CDATA[Using Sync Optic’s Sync Feature can be used by clicking “Sync” in the properties panel or by selecting Tools -> Trigger Sync.  Single…]]></description><link>https://useoptic.com/docs/using/sync</link><guid isPermaLink="false">https://useoptic.com/docs/using/sync</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;using-sync&quot;&gt;&lt;a href=&quot;#using-sync&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Using Sync&lt;/h1&gt;
&lt;p&gt;Optic’s Sync Feature can be used by clicking “Sync” in the properties panel or by selecting Tools -&gt; Trigger Sync. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Single Project Sync: Right now Optic can only sync code within a single project. Support for syncing across multiple codebases is coming soon. If you need that now, contact us about a &lt;a href=&quot;https://useoptic.com/teams&quot;&gt;team account&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once you have triggered a sync, Optic will generate a patch for your project. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/sync-summary.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Because you are the expert in your own code, we do not want to make sweeping changes to your code without getting approval first. On the left sidebar, Optic will show you the exact patches it will apply to your code: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/patch-file.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you want to override anything in Optic’s patch, click on the line you want to edit, and Optic will allow you to change the patch before it is staged.&lt;/p&gt;
&lt;p&gt;When you are ready, click “Apply” and Optic will patch all the affected files. Here’s a &lt;a href=&quot;https://www.youtube.com/watch?v=h42rxrO4KPQ&quot;&gt;full video of the sync feature&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Transform]]></title><description><![CDATA[Transforming Code Much of programming is simply mapping one kind of code to another. For example, you have to get your forms lined up with…]]></description><link>https://useoptic.com/docs/using/transform</link><guid isPermaLink="false">https://useoptic.com/docs/using/transform</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;transforming-code&quot;&gt;&lt;a href=&quot;#transforming-code&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Transforming Code&lt;/h1&gt;
&lt;p&gt;Much of programming is simply mapping one kind of code to another. For example, you have to get your forms lined up with your state management system and your networking code to be in sync with your API.&lt;/p&gt;
&lt;p&gt;Optic automates these mappings with our Transformations which appear in the Search Panel whenever they are available for the code you are interacting with. Transformations take one code object and return another of a known type. &lt;/p&gt;
&lt;p&gt;Here’s an example where we convert a Mongoose Model into a Create Route using Express JS. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/transform.gif&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Adding Optic Support for new IDEs]]></title><description><![CDATA[Adding Optic Support for new IDEs Here is the spec for building Optic compatible text editor plugins. Existing plugins for your reference…]]></description><link>https://useoptic.com/docs/authoring/adding-optic-support-for-new-id-es</link><guid isPermaLink="false">https://useoptic.com/docs/authoring/adding-optic-support-for-new-id-es</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;adding-optic-support-for-new-ides&quot;&gt;&lt;a href=&quot;#adding-optic-support-for-new-ides&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding Optic Support for new IDEs&lt;/h1&gt;
&lt;p&gt;Here is the spec for building Optic compatible text editor plugins. Existing plugins for your reference can be found on our &lt;a href=&quot;https://github.com/opticdev&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;tldr&quot;&gt;&lt;a href=&quot;#tldr&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;tl;dr&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open a websocket connection&lt;/li&gt;
&lt;li&gt;Listen for 1 event&lt;/li&gt;
&lt;li&gt;Send 2 events from onChange callbacks.&lt;/li&gt;
&lt;li&gt;Publish Your Work, Become an Optic Contributer&lt;/li&gt;
&lt;li&gt;Swag Arrives in Mail&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;contributing-a-plugin&quot;&gt;&lt;a href=&quot;#contributing-a-plugin&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Contributing a Plugin&lt;/h2&gt;
&lt;p&gt;Any individual or team is invited to contribute an editor plugin to Optic&apos;s ecosystem. Optic&apos;s team will provide support during the development process and can be available to help anytime. If you want your plugin to become the official one listed on our website email Aidan (aidan@useoptic.com). A preference will be given to teams that intend to maintain their plugin. Plugins will be evaluated and tested against this spec before being listed.&lt;/p&gt;
&lt;p&gt;Individuals will be listed prominently as Optic contributors and their organizations (optionally) as sponsors. Swag will be mailed :)&lt;/p&gt;
&lt;h2 id=&quot;overview&quot;&gt;&lt;a href=&quot;#overview&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Overview&lt;/h2&gt;
&lt;p&gt;Optic Editor plugins forward the current state of an IDE to Optic&apos;s local server &lt;code class=&quot;language-text&quot;&gt;localhost:30333&lt;/code&gt; over a websocket connection. The state includes cursor position, highlighted region and any changes made in memory. Optic uses this information to establish the user&apos;s context and query the appropriate resources. The results of this processing are not handled by the editor plugins and are instead forwarded to the Optic GUI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/opticdev/docs/raw/master/images/system-overview.svg?sanitize=true&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;spec&quot;&gt;&lt;a href=&quot;#spec&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spec&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Terms:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server - the local Optic server&lt;/li&gt;
&lt;li&gt;Editor - the target text editor or IDE you are building for.&lt;/li&gt;
&lt;li&gt;Plugin - your plugin for Editor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;connecting-to-optic&quot;&gt;&lt;a href=&quot;#connecting-to-optic&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Connecting to Optic&lt;/h2&gt;
&lt;p&gt;Users may start Optic after the editor, at the same time as the editor or even hours before. For this reason we can&apos;t assume that the server will even be running when our plugin initializes. Your plugin should connect to the server if it is active or continue trying to connect at a regular interval of no more than 10 seconds. These pings are pretty inexpensive especially when spread out over 10 seconds.&lt;/p&gt;
&lt;p&gt;Each editor should connect to Optic with its own distinct path: &lt;code class=&quot;language-text&quot;&gt;localhost:30333/socket/editor/:editorName&lt;/code&gt;. Editor name should be lowercase and whitespace-free. ie Atom -&gt; atom, Visual Studio -&gt; visualstudio&lt;/p&gt;
&lt;p&gt;Test Cases:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Editor Started. Wait 10 seconds. Start Optic. Within 10 seconds editor should connect to Optic.&lt;/li&gt;
&lt;li&gt;Editor is connected to Optic. Optic is turned off. Wait 10 seconds. Start Optic. Within 10 seconds editor should connect to Optic.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;sending--receiving-events&quot;&gt;&lt;a href=&quot;#sending--receiving-events&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sending &amp;#x26; Receiving Events&lt;/h2&gt;
&lt;p&gt;If your editor supports a node runtime for plugins, you&apos;re in luck! Optic has released the &lt;a href=&quot;https://github.com/opticdev/optic-editor-sdk/blob/master/src/EditorConnection.js&quot;&gt;optic-editor-sdk&lt;/a&gt;. The Editor SDK automatically manages creating your socket connection, sending &amp;#x26; receiving events and reconnecting if the connection is lost. It&apos;ll cover everything but the editor specific events and logic.&lt;/p&gt;
&lt;p&gt;If you aren&apos;t using a node environment you&apos;ll have to implement the protocols covered below manually. Don&apos;t be deterred, it&apos;s still pretty simple.&lt;/p&gt;
&lt;h2 id=&quot;monitoring&quot;&gt;&lt;a href=&quot;#monitoring&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Monitoring&lt;/h2&gt;
&lt;p&gt;Plugins should monitor for two kinds of editor events. Each editor has a different name for these events so we&apos;ll define them here in the abstract.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;cursor position moved&lt;/strong&gt; - Anytime a user moves their cursor (either by clicking, arrow keys or other shortcut). This also includes selecting a region of text with the mouse.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;text content changed&lt;/strong&gt; - Anytime a change is made by using the editor. Some editors are constantly checking the disk for external changes from tools like Git, others don&apos;t notice these kinds of changes unless the user explicitly reloads the file. We want whatever the editor is displaying to be what Optic is reading (otherwise there&apos;s a mismatch that&apos;ll confuse the user). Follow the convention of the editor with your plugin. Most of the time this won&apos;t be an issue if you listen for the editor&apos;s updated event.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After each of these events you should send the following JSON message through the websocket:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;full/path/to/file&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;133&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;133&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;entire contents of file&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;A note on start/end: If your editor stores ranges as column/row you will have to convert them to absolute indices. Optic expects the first character in a file to be 0, the second 1, etc.&lt;/p&gt;
&lt;p&gt;Plugins should assume that Optic is stateless and send the full event every time. We tinkered around with sending a buffer of content changes, but found it was more trouble and much more error prone than it was worth. All the IO is local so optimizing for smaller payloads isn&apos;t as important as it would be in a non-local networked environment.&lt;/p&gt;
&lt;p&gt;Test Cases:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Editor is connected to server. Click somewhere in a file, Optic event sent with the new range to server&lt;/li&gt;
&lt;li&gt;Editor is connected to server. Use arrow keys to navigate around a file, Optic event sent with the new range to server&lt;/li&gt;
&lt;li&gt;Editor is connected to server. Select text by dragging a range, Optic event sent with the new range to server&lt;/li&gt;
&lt;li&gt;Editor is connected to Optic. Text is [added, deleted], Optic event sent with new range and content to server&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;capturing-search&quot;&gt;&lt;a href=&quot;#capturing-search&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Capturing Search&lt;/h2&gt;
&lt;p&gt;One of the cool features of Optic is the ability to search just by typing in your IDE. Today we use &apos;///&apos; to let Optic know a search is being made. It&apos;s on our roadmap to stop using leading characters to indicate a search, but right now we don&apos;t have a good alternative implemented.&lt;/p&gt;
&lt;p&gt;Editor plugins are therefore responsible for figuring out if they should send a &lt;code class=&quot;language-text&quot;&gt;context&lt;/code&gt; event or a &lt;code class=&quot;language-text&quot;&gt;search&lt;/code&gt; event. You should add your logic for capturing searches to your &lt;strong&gt;text content changed&lt;/strong&gt; callback. If the user is typing a search opt to send a search event to Optic and in all other cases send a context event.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;full/path/to/file&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;133&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;end&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;133&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;entire contents of file&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;User&apos;s query&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3 id=&quot;editor-sdk&quot;&gt;&lt;a href=&quot;#editor-sdk&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Editor SDK&lt;/h3&gt;
&lt;p&gt;If you&apos;re in a node environment the Editor SDK ships with logic for this. Just pass in the content of the current line and start/end positions of the cursor within that line.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; checkForSearch &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;optic-editor-sdk&apos;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;checkForSearch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentLineContent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; startInLine&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; endInLine&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;///query                                                       {isMatch: true, query: query}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/// hello                                                      {isMatch: true, query: hello}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//normal comment                                               {isMatch: false}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;                                                   &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isMatch&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3 id=&quot;other-implementations&quot;&gt;&lt;a href=&quot;#other-implementations&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other Implementations&lt;/h3&gt;
&lt;p&gt;If you aren&apos;t in a node environment you&apos;ll have to implement the search check yourself. Here&apos;s our regex &amp;#x26; node code as a reference:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; searchRegex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/^[\s]*\/\/\/[\s]*(.+)/&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;checkForSearch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; start&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; match &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; searchRegex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isSearch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; end&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; match &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		isSearch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		query&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;match &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; match&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; undefined
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Test Cases:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Editor is connected to server. Type &apos;///query&apos;, Optic search event sent, no context event sent.&lt;/li&gt;
&lt;li&gt;Editor is connected to server. Type &apos;//query&apos;, Optic context event sent, no search event event sent.&lt;/li&gt;
&lt;li&gt;Editor is connected to server. Write normal code, Optic context event sent, no search event event sent.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;file-staging-events&quot;&gt;&lt;a href=&quot;#file-staging-events&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;File Staging Events&lt;/h2&gt;
&lt;p&gt;Many editors will not read changes to disk made by outside processes. Early versions of Optic would save their updates to the disk but the editors wouldn&apos;t display the updates. This necessitated an event being sent from the server to the plugin that would stage new contents in the editors. The file updates are also saved to disk by the server.&lt;/p&gt;
&lt;p&gt;Your plugin should listen for an event called &lt;code class=&quot;language-text&quot;&gt;files-updated&lt;/code&gt;. Within that payload will be an object called &lt;code class=&quot;language-text&quot;&gt;updates&lt;/code&gt; which has  the absolute path of each file that needs updating as its keys and the new contents as the values. You should iterate over all of the files and set their content in the editor to the new value. Also tell the editor to open any files that were changed but are not currently open.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token string&quot;&gt;&quot;event&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;files-updated&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token string&quot;&gt;&quot;updates&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token string&quot;&gt;&quot;/path/to/file1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;new contents as string&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;/path/to/file2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;new contents as string&quot;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Some gotchas we&apos;ve run into&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some editors with complex tabbing systems will require you to set the text of EVERY tab that is open for the file path.&lt;/li&gt;
&lt;li&gt;Some editors will not like having text updated in this manner if there are pending/unsaved changed. Make sure you apply any &lt;code class=&quot;language-text&quot;&gt;force&lt;/code&gt; flags that are provided.&lt;/li&gt;
&lt;li&gt;Don&apos;t refresh the tabs instead of setting their content. Optic saves everything asynchronously and while it only takes a few milliseconds to hit the disk we have observed some race conditions when we tried that approach.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Test Cases:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Optic is connected to server. Receives an update event with 3 file changes. All tabs update their contents&lt;/li&gt;
&lt;li&gt;Optic is connected to server. Receives an update event with 1 file (that is closed). That file opens in a new tab with updated content&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;testing&quot;&gt;&lt;a href=&quot;#testing&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing&lt;/h1&gt;
&lt;p&gt;Testing plugins is easiest if you capture the server output. All connections from editors will get logged as will all received and sent events. You can capture the console output by opening the Optic App from the command line.&lt;/p&gt;
&lt;p&gt;Edit the &lt;code class=&quot;language-text&quot;&gt;launchServer.sh&lt;/code&gt; file in &lt;code class=&quot;language-text&quot;&gt;/Applications/Optic.app/Contents/Resources/launchServer.sh&lt;/code&gt; to enable logging. Remove &lt;code class=&quot;language-text&quot;&gt;-Dprod=true&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; +x &lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt; -jar -Dopticmdbinary&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$3&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Run Optic.app from a terminal session:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;aidancunniffe$ /Applications/Optic.app/Contents/MacOS/Optic&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;You should see data like this come through live. Note that many of the events you&apos;ll see pop up are from are being sent to/from the Optic GUI and are not going to be routed to your plugin.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;STARTING SERVER
Killed last server pid:14431
Server online at http://localhost:30333/
Press RETURN to stop...

STARTING CHIP NOW
READY
Finished navigating to url Optional(file:///Applications/Optic.app/Contents/Resources/embedded/webapp/dist/index.html#/)
optic-agent agent connected

atom editor connected

RECEIVED {&amp;quot;event&amp;quot;:&amp;quot;context&amp;quot;,&amp;quot;file&amp;quot;:&amp;quot;/Users/aidancunniffe/Desktop/demo/demo_project/models.js&amp;quot;,&amp;quot;start&amp;quot;:253,&amp;quot;end&amp;quot;:253,&amp;quot;contents&amp;quot;:&amp;quot;const mongoose = require(&amp;#39;mongoose&amp;#39;)\n\nconst model = mongoose.model(&amp;#39;Hello&amp;#39;, new mongoose.Schema({\n    &amp;#39;isAdmin&amp;#39;: &amp;#39;boolean&amp;#39;,\n    &amp;#39;firstName&amp;#39;: &amp;#39;string&amp;#39;,\n    &amp;#39;test&amp;#39;: &amp;#39;string&amp;#39;,\n    &amp;#39;lastName&amp;#39;: &amp;#39;string&amp;#39;,\n}))\n\napp.post(&amp;#39;/hello&amp;#39;, function (req, res) {\n  new Model({ isAdmin: req.body.isAdmin,\n  firstName: req.body.firstName,\n  test: req.body.test,\n  lastName: req.body.lastName }).save((err, item) =&amp;gt; {\n    if (!err) {\n        res.send(200, item)\n    } else {\n        res.send(400, err)\n    }\n  })\n})\n\napp.post(&amp;#39;/hello&amp;#39;, function (req, res) {\n  new Model({ isAdmin: req.body.isAdmin,\n  firstName: req.body.firstName,\n  lastName: req.body.lastName }).save((err, item) =&amp;gt; {\n    if (!err) {\n        res.send(200, item)\n    } else {\n        res.send(400, err)\n    }\n  })\n})\n&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;</content:encoded></item><item><title><![CDATA[Knowledge Packages]]></title><description><![CDATA[Knowledge Packages Each markdown file becomes its own knowledge package. A knowledge package is referenced by a package name. Package names…]]></description><link>https://useoptic.com/docs/authoring/knowledge-packages</link><guid isPermaLink="false">https://useoptic.com/docs/authoring/knowledge-packages</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;knowledge-packages&quot;&gt;&lt;a href=&quot;#knowledge-packages&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Knowledge Packages&lt;/h1&gt;
&lt;p&gt;Each markdown file becomes its own knowledge package. A knowledge package is referenced by a package name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Package names follow the format &lt;code class=&quot;language-text&quot;&gt;{author}:{name}@{version}&lt;/code&gt; ie &lt;code class=&quot;language-text&quot;&gt;mycompany:authentication@03.2.2&lt;/code&gt;. We prefix package names with the author’s username because there may be several users/teams that offer an approach to writing the same kind of code. It’s up to you to decide which conventions you want to include in your project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To configure a knowledge package, add this annotation to the top of your markdown:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Package {&quot;author&quot;: &quot;author&quot;, &quot;package&quot;: &quot;packageName&quot;, &quot;version&quot;: &quot;0.1.0&quot;} --&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Required&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;package 
&lt;em&gt;string&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;the name of this package. alphanumeric with dashes. No spaces&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;author 
&lt;em&gt;string&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;the author of this package. alphanumeric with dashes. No spaces&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;version 
&lt;em&gt;string&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;the 
&lt;a href=&quot;https://semver.org/&quot;&gt;semantic version&lt;/a&gt;
 of this package&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;to publish knowledge to the main registry or a private registry the author field must be your username.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;dependencies&quot;&gt;&lt;a href=&quot;#dependencies&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;It’s possible to include dependencies on other Optic Markdown files by adding this annotation:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Package {&quot;author&quot;: &quot;author&quot;, &quot;package&quot;: &quot;packageName&quot;, &quot;version&quot;: &quot;0.1.0&quot;, &quot;dependencies&quot;: {
		&quot;optic:rest&quot;: &quot;0.1.0&quot;,
		&quot;optic:model&quot;: &quot;latest&quot;,
		&quot;optic:request&quot;: &quot;0.1.0&quot;
	}} --&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;To reference an object in another package write &lt;code class=&quot;language-text&quot;&gt;{packageId}/{name}&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;...
Schema=“optic:rest/route”
...&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;</content:encoded></item><item><title><![CDATA[Publishing]]></title><description><![CDATA[Publishing Knowledge Before starting, download the Optic Markdown CLI  Once you have taught Optic to do useful tasks, we encourage you to…]]></description><link>https://useoptic.com/docs/authoring/publishing</link><guid isPermaLink="false">https://useoptic.com/docs/authoring/publishing</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;publishing-knowledge&quot;&gt;&lt;a href=&quot;#publishing-knowledge&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Publishing Knowledge&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Before starting, download the Optic Markdown CLI &lt;code class=&quot;language-text&quot;&gt;npm install optic-markdown -g&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once you have taught Optic to do useful tasks, we encourage you to share those capabilities with your team members or the community at large. This can be done by distributing your Optic Markdown with the OPM (Optic Package Manager). The OPM, like other package managers, can resolve Optic Markdown packages and install them on your local Optic distribution based on references in your &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&quot;repositories&quot;&gt;&lt;a href=&quot;#repositories&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Repositories&lt;/h2&gt;
&lt;p&gt;Currently you can publish knowledge to 3 repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Public Registry&lt;/strong&gt;: registry.opticdev.com&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Locally&lt;/strong&gt;: ${OPTIC&lt;em&gt;DATA&lt;/em&gt;DIRECTORY}/packages&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A Private Registry&lt;/strong&gt;:  yourteamregistry.host.com&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Private Registries are available with &lt;a href=&quot;https://opticdev.com/teams/&quot;&gt;team accounts&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;creating-an-account&quot;&gt;&lt;a href=&quot;#creating-an-account&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Creating an Account&lt;/h2&gt;
&lt;p&gt;Accounts can be created by running &lt;code class=&quot;language-text&quot;&gt;opticmd createuser&lt;/code&gt;. Once you create an account, your credentials will be stored securely for later use. Each account is created with one namespace it can publish to, i.e. &lt;code class=&quot;language-text&quot;&gt;yourname:{packageName}@{version}&lt;/code&gt;. Team accounts can be given additional writing permissions for their team/project namespaces.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ opticmd createuser
email:  example@email.com
password:
namespace:  mynamespace&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2 id=&quot;adding-credentials&quot;&gt;&lt;a href=&quot;#adding-credentials&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding Credentials&lt;/h2&gt;
&lt;p&gt;If you already have an account you can run &lt;code class=&quot;language-text&quot;&gt;opticmd adduser&lt;/code&gt; to store your credentials. These credentials are only verified when you transact with the registry.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ opticmd adduser
email:  example@email.com
password:&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2 id=&quot;publishing-a-package&quot;&gt;&lt;a href=&quot;#publishing-a-package&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Publishing a Package&lt;/h2&gt;
&lt;p&gt;Packages can be published by running &lt;code class=&quot;language-text&quot;&gt;opticmd publish&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;opticmd publishlocal&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ opticmd publish /path/to/markdown.md
or
$ opticmd publishlocal /path/to/markdown.md&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Rules that provide integrity on non-local registries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only valid Optic Markdown can be published.&lt;/li&gt;
&lt;li&gt;You can only publish to a namespace for which you have write permissions.&lt;/li&gt;
&lt;li&gt;Each version of a package is immutable once published.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;referencing-a-package&quot;&gt;&lt;a href=&quot;#referencing-a-package&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Referencing a Package&lt;/h2&gt;
&lt;p&gt;Packages can be referenced in the knowledge section of your &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file. When Optic loads your project it will resolve each package and its nested dependencies.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;skills&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; yournamespace&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;package
  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; optic&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;mongoose@0.1.0&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;The OPM first tries to resolve any raw markdown dependencies from &lt;code class=&quot;language-text&quot;&gt;knowledge_paths&lt;/code&gt;, then local dependencies, and finally those from the registries. You can override a dependency (even once you don’t own) by publishing it locally. With great power comes great responsibility.&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Writing Lenses]]></title><description><![CDATA[Writing Lenses What is a lens?  - A lens can parse and mutate a specific kind of code. It can extract a JSON object representing the code…]]></description><link>https://useoptic.com/docs/authoring/writing-lenses</link><guid isPermaLink="false">https://useoptic.com/docs/authoring/writing-lenses</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;writing-lenses&quot;&gt;&lt;a href=&quot;#writing-lenses&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Writing Lenses&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;What is a lens?&lt;/strong&gt; - A lens can parse and mutate a specific kind of code. It can extract a JSON object representing the code. If you change that JSON object and pass it back into the mutator a lens will update the raw code to match the new model. Lenses serve as Optic&apos;s primary interface for interacting with discrete types of code.&lt;/p&gt;
&lt;p&gt;Defining a Lens in Optic Markdown is a lot like showing your friend a snippet of code and pointing out all the parts they can edit. You do not need to write any code or have prior knowledge of AST trees to write a Lens. It will take your description from markdown and compile it into the code it needs to walk the AST Tree and extract values. Lenses serve as loose matchers for code and will match any code that is structurally similar regardless of formatting.&lt;/p&gt;
&lt;h2 id=&quot;match-and-extract&quot;&gt;&lt;a href=&quot;#match-and-extract&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Match and Extract&lt;/h2&gt;
&lt;p&gt;Optic matches code and extracts values from that code similar to how a regex works. When a Lens is compiled, it is turned into a AST pattern that is analogous to a regex pattern. This description is compared to new instances from left -&gt; right and will stop traversing the AST Tree as soon as a node is found that does not match the rules in the description.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a node is matching, values specified in the Lens are extracted and added to a result object.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If a node in your code meets the description and the extracted values constitute a valid Schema of the type defined by the Lens, then a match is found.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;training-optic&quot;&gt;&lt;a href=&quot;#training-optic&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Training Optic&lt;/h2&gt;
&lt;p&gt;Defining one of Optic&apos;s internal AST Patterns is very challenging, even Optic&apos;s engineers do not do that by hand. Instead we use Optic&apos;s trainer to teach Optic how to interact with our code.&lt;/p&gt;
&lt;p&gt;You can start the trainer by running:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;opticmd starttrainer&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;The first step is to provide Optic with an example snippet. When reading your code, Optic will look for sections of similar forum to this snippet. The snippet is also used as the base that all instances of this lens generate from.
&lt;img src=&quot;/doc-images/example-snippet.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next you need to tell Optic how you&apos;d expect it to the expected value for parsing this snippet. In this example we&apos;re training a require call in javascript. We expect Optic to parse this code as an object with a property called &lt;code class=&quot;language-text&quot;&gt;as&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;path&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A know limitation of the trainer is that it can&apos;t handle mapped schemas yet. This is coming very soon
&lt;img src=&quot;/doc-images/expected-value.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;When you press &lt;code class=&quot;language-text&quot;&gt;Train Lens&lt;/code&gt; Optic analyses your snippet and the expected value and figures out how to build a lens that guarantees the two line up. You can see which parts of your snippet Optic is extracting values from in the &apos;Value Candidates section of the&apos; verify card. Sometimes if there is ambiguity in the training process Optic will present you with choices for one or more fields.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/verify-results.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;setting-variables&quot;&gt;&lt;a href=&quot;#setting-variables&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Setting Variables&lt;/h3&gt;
&lt;p&gt;Variables are a key part of Optic’s loose matching. When you define a variable in your Lens, it tells Optic that a token can have any value, as long as it is consistent throughout the code block.&lt;/p&gt;
&lt;p&gt;For instance without a variable defined, all 3 instances of “result” must equal “result” for Optic to match this section of code.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;function test(result) {
	message.post(result)
	system.process(result)
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;If you define a variable for ‘result’ the following code will also be matched,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;function test(otherToken) {
	message.post(otherToken)
	system.process(otherToken)
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;But this code would not be matched&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;function test(otherToken) {
	message.post(otherToken)
	system.process(result)
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;There are two types of variables. Those defined in &lt;code class=&quot;language-text&quot;&gt;self&lt;/code&gt; and those in &lt;code class=&quot;language-text&quot;&gt;scope&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;self&lt;/strong&gt; - enforces consistency of tokens in this node and its children&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scope&lt;/strong&gt; - If the node&apos;s parent also defines a variable with the same name then the value of this variable must match the one in its parent. If it&apos;s parent does not define a variable with the same name this behaves the same as self.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Variables can be set by typing the name of the variables in the input:
&lt;img src=&quot;/doc-images/variables.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;containers&quot;&gt;&lt;a href=&quot;#containers&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Containers&lt;/h3&gt;
&lt;p&gt;Containers can be used to label callbacks or other blocks of code and set rules about what kind of code can go inside of them. A container is defined in the example snippet by adding an inline comment with the following format &lt;code class=&quot;language-text&quot;&gt;//:{container name}&lt;/code&gt;. If you add one or more containers you will be given options to configure them in the trainer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/containers.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;For each container in your snippet a children rule must be defined:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;matches when&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Any&lt;/td&gt;
&lt;td&gt;always&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Same Plus&lt;/td&gt;
&lt;td&gt;children from example snippet are present, in the order they appear in the example, plus any other children.  
&lt;br&gt;
 example snippet = 
[
A, B, C
]
 
&lt;br&gt;
 
[
B, C
]
 false 
&lt;br&gt;
 
[
A, D, B, C
]
 true 
&lt;br&gt;
 
[
A, B, C
]
 true 
&lt;br&gt;
 
[
A, B, C, D
]
 true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Same Plus Any Order&lt;/td&gt;
&lt;td&gt;children from the example snippet are present, in any order, plus any other children 
&lt;br&gt;
 example snippet = 
[
A, B, C
]
 
&lt;br&gt;
 
[
C, B, D, E, A
]
 true 
&lt;br&gt;
 
[
A, B, C
]
 true 
&lt;br&gt;
 
[
C, B, D, E
]
 false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Same Any Order&lt;/td&gt;
&lt;td&gt;all children from the example snippet are present, in any order,
&lt;br&gt;
 example snippet = 
[
A, B, C
]
 
&lt;br&gt;
 
[
B, C, A
]
 true 
&lt;br&gt;
 
[
C, A, B
]
 true 
&lt;br&gt;
 
[
C
]
 false 
&lt;br&gt;
 
[
C, B, A, D
]
 false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exact&lt;/td&gt;
&lt;td&gt;children match those in the example snippet&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;customize-schema&quot;&gt;&lt;a href=&quot;#customize-schema&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Customize Schema&lt;/h3&gt;
&lt;p&gt;During training Optic assigns a very basic schema to your lens. If you want to customize this schema you can update the schema by clicking &apos;Customize Schema&apos;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/schema.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you want Optic to implement another schema you can reference it using its identifier ie &lt;code class=&quot;language-text&quot;&gt;optic:package@0.1.0/schema&lt;/code&gt;. Make sure the output of your lens conforms to whatever schema you choose or Optic will instances it finds in your code at runtime.&lt;/p&gt;
&lt;h2 id=&quot;testing-the-lens&quot;&gt;&lt;a href=&quot;#testing-the-lens&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing the Lens&lt;/h2&gt;
&lt;p&gt;When you&apos;re ready to try out the lens click &lt;code class=&quot;language-text&quot;&gt;Proceed to Testing&lt;/code&gt;. Here you can experiment with the lens you&apos;ve configured and make sure it work as you would expect within Optic.&lt;/p&gt;
&lt;h2 id=&quot;saving&quot;&gt;&lt;a href=&quot;#saving&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Saving&lt;/h2&gt;
&lt;p&gt;When you are finished testing your lens give it a name and an id and hit &apos;Finish&apos;. An Optic Markdown annotation representing this lens will be added to your markdown file automatically.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Lens {&quot;name&quot;:&quot;HTTP Request&quot;,&quot;id&quot;:&quot;http-request&quot;,&quot;value&quot;:{&quot;method&quot;:{&quot;type&quot;:&quot;token&quot;,&quot;at&quot;:{&quot;astType&quot;:&quot;Identifier&quot;,&quot;range&quot;:{&quot;start&quot;:8,&quot;end&quot;:11}}},&quot;options&quot;:{&quot;type&quot;:&quot;object-literal&quot;,&quot;at&quot;:{&quot;astType&quot;:&quot;ObjectExpression&quot;,&quot;range&quot;:{&quot;start&quot;:12,&quot;end&quot;:14}}}},&quot;variables&quot;:{&quot;err&quot;:&quot;self&quot;,&quot;response&quot;:&quot;self&quot;,&quot;body&quot;:&quot;self&quot;},&quot;containers&quot;:{&quot;handler&quot;:&quot;any&quot;,&quot;success&quot;:&quot;any&quot;,&quot;error&quot;:&quot;any&quot;},&quot;schema&quot;:&quot;request&quot;,&quot;initialValue&quot;:{}} --&gt;&lt;/span&gt;
```javascript
request.get({}, function (err, response, body) {
  //:handler
  if (response.statusCode &gt;= 200 &amp;amp;&amp;amp; statusCode.status &amp;lt; 300) {
&lt;span class=&quot;token code keyword&quot;&gt;    //:success&lt;/span&gt;
  } else {
&lt;span class=&quot;token code keyword&quot;&gt;    //:error&lt;/span&gt;
  }

})
```&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;</content:encoded></item><item><title><![CDATA[Defining Transformations]]></title><description><![CDATA[Defining Transformations Transformations allow Optic to convert one type of model into another (i.e. model -> route, route -> form). A…]]></description><link>https://useoptic.com/docs/authoring/defining-transformations</link><guid isPermaLink="false">https://useoptic.com/docs/authoring/defining-transformations</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;defining-transformations&quot;&gt;&lt;a href=&quot;#defining-transformations&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Defining Transformations&lt;/h1&gt;
&lt;p&gt;Transformations allow Optic to convert one type of model into another (i.e. model -&gt; route, route -&gt; form). A Transformation is just a pure Javascript function that takes one type of Schema and returns another.&lt;/p&gt;
&lt;p&gt;Every Transformation needs a &lt;code class=&quot;language-text&quot;&gt;yields&lt;/code&gt; field. This field should indicate what the result of this transformation will be ie &quot;Create Route&quot;. Transformations also get an &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;output&lt;/code&gt; field which are references to the Schemas they consume and return.&lt;/p&gt;
&lt;p&gt;The code block for a Transformation must contain a function named &lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt;. This function will receive a model that is the same type as &lt;code class=&quot;language-text&quot;&gt;input&lt;/code&gt; and will return a model of type &lt;code class=&quot;language-text&quot;&gt;output&lt;/code&gt;. If the function returns an object that doesn’t conform to type output or if the code throws an exception, the Transformation will return an error to the user.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Transformation {
    &quot;yeilds&quot;: &quot;Create Route&quot;,
    &quot;id&quot;: &quot;schematoroute&quot;,
    &quot;input&quot;: &quot;schema&quot;,
    &quot;output&quot;: &quot;optic:rest/route&quot;
  } --&gt;&lt;/span&gt;
```javascript
function transform(input) {
&lt;span class=&quot;token code keyword&quot;&gt;    const routeName = input.name.toLowerCase()&lt;/span&gt;
&lt;span class=&quot;token code keyword&quot;&gt;    const route = “/“+routeName&lt;/span&gt;

&lt;span class=&quot;token code keyword&quot;&gt;    const parameters = Object.keys(input.Schema).map(i=&gt; {&lt;/span&gt;
&lt;span class=&quot;token code keyword&quot;&gt;        return {&lt;/span&gt;
&lt;span class=&quot;token code keyword&quot;&gt;            in: ‘body’,&lt;/span&gt;
&lt;span class=&quot;token code keyword&quot;&gt;            name: i&lt;/span&gt;
&lt;span class=&quot;token code keyword&quot;&gt;        }&lt;/span&gt;
&lt;span class=&quot;token code keyword&quot;&gt;    })&lt;/span&gt;

&lt;span class=&quot;token code keyword&quot;&gt;    return {&lt;/span&gt;
&lt;span class=&quot;token code keyword&quot;&gt;        method: “post”,&lt;/span&gt;
&lt;span class=&quot;token code keyword&quot;&gt;        url: route,&lt;/span&gt;
&lt;span class=&quot;token code keyword&quot;&gt;        parameters&lt;/span&gt;
&lt;span class=&quot;token code keyword&quot;&gt;    }&lt;/span&gt;
}
```&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2 id=&quot;asking-for-additional-information&quot;&gt;&lt;a href=&quot;#asking-for-additional-information&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Asking for Additional Information&lt;/h2&gt;
&lt;p&gt;Some Transformations will require more information than what you find in its input Schema. For instance, when generating a route, you might want to offer a flag for &lt;code class=&quot;language-text&quot;&gt;authenticated&lt;/code&gt; that affects how that route is rendered.&lt;/p&gt;
&lt;p&gt;Optic Markdown supports asking for additional information through its Ask API. You can ask for a more values by placing an ask call above  your &lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt; function. Optic converts these ask calls into an anonymous Schema that users have to respond to in the Editor Window after they select the Transformation.&lt;/p&gt;
&lt;p&gt;The first argument to all of the ask functions is the name of the field. We suggest you make it a valid JS token, so you can reference it with dot notation in your &lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The second field is a description. Use this field to give users the details they need to properly answer your questions and inform them of how this information will be used.&lt;/p&gt;
&lt;p&gt;When calling &lt;code class=&quot;language-text&quot;&gt;forPrimitive&lt;/code&gt;, the 3rd argument is required and defines the type you must answer with. Right now &lt;code class=&quot;language-text&quot;&gt;boolean&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;string&lt;/code&gt;, and &lt;code class=&quot;language-text&quot;&gt;number&lt;/code&gt; are allowed. These types follow the same semantics as they do in the &lt;a href=&quot;http://json-Schema.org/&quot;&gt;JSON Schema&lt;/a&gt; Spec.&lt;/p&gt;
&lt;p&gt;When calling &lt;code class=&quot;language-text&quot;&gt;forlens&lt;/code&gt;, the 3rd argument is optional and allows you to filter the Lenses you can answer with to ones that render a certain Schema. There’s a one-to-many relationship between Schemas and Lenses, so often a Transformation will need to ask users which Lens they would like to render the result with. Naturally if you are Transforming something into a Rest Route, you only want to employ Lenses capable of doing that.&lt;/p&gt;
&lt;p&gt;When calling &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt;, the 3rd argument is a function that receives the model being transformed. You can process that input and return another JSON schema. This supports asking for data based on the input model.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using Answers:&lt;/strong&gt;
All answers are added to an object which is passed into the &lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt; function as the second argument. You can access them with dot or bracket notation as you would any other property.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;ask.forPrimitive(‘ask1’, ‘Description here...’, ‘string’)
ask.forLens(‘ask2’, ‘Description here...’, ‘test:package/Schema’)
ask.forSchema(‘ask3’, ‘Description here...’)
ask.for(‘ask4’, ‘Description here...’, (input)=&amp;gt; {
  return {}
})
function transform(input, answers) {
  answers.ask1 //a primitive of the specified type
  answers.ask2 //the ID of a compiled Lens, guaranteed to render specified Schema
  answers.ask3 //a Schema reference
...
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2 id=&quot;nested-transformations&quot;&gt;&lt;a href=&quot;#nested-transformations&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nested Transformations&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The Need:&lt;/strong&gt; Most practical Transformations are not going to rely on just one type of Schema or Lens. For instance Routes contain validation, queries, error handling, and responses. It would be tedious if users had to Transform a model into each of those components individually. Many code generators have elected to make larger abstractions RouteWithValidationAndQueryAndResponse, but big abstractions are brittle and go against our design principles.&lt;/p&gt;
&lt;p&gt;Optic addresses this need by allowing users to tap into our internal Render system. Instead of returning a simple model from the &lt;code class=&quot;language-text&quot;&gt;Transform&lt;/code&gt; function, there is an option to return a request for our internal Render system to do something more complex.&lt;/p&gt;
&lt;p&gt;There’s a Generate function in the global scope that you can call from your Transformation.
&lt;code class=&quot;language-text&quot;&gt;Generate(SchemaRef, value, {...options})&lt;/code&gt;. This function takes the following arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Schema Reference - The reference to the Schema you would like to render&lt;/li&gt;
&lt;li&gt;value - The value (must conform to the above Schema)&lt;/li&gt;
&lt;li&gt;options - Allow you to configure the render (see below)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you return &lt;code class=&quot;language-text&quot;&gt;Generate(‘optic:js/import’, {definedAs: ‘hello’, pathTo: ‘world’})&lt;/code&gt; from your Transform function, Optic will write &lt;code class=&quot;language-text&quot;&gt;import hello from ‘world’&lt;/code&gt; in your code.&lt;/p&gt;
&lt;h3 id=&quot;render-options&quot;&gt;&lt;a href=&quot;#render-options&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Render Options&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;field&lt;/th&gt;
&lt;th&gt;default&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lensId (optional)&lt;/td&gt;
&lt;td&gt;1st Lens found with Schema&lt;/td&gt;
&lt;td&gt;The ID of the Lens you want to render with.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inFile (optional)&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;The name of the file Optic we should insert the result into. Current file if not set empty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tag (optional, only valid for nested Generate calls)&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;A unique string used to identify this nested transformation. Used by sync to locate this node in code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;containers (optional)&lt;/td&gt;
&lt;td&gt;Empty Object&lt;/td&gt;
&lt;td&gt;A map of container names -&gt; 
[
StagedNode...
]
. Use this to fill a Lens container with your own staged nodes. They will be rendered in the order of the array you provide&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;variables (optional)&lt;/td&gt;
&lt;td&gt;Empty Object&lt;/td&gt;
&lt;td&gt;A map of variable names and the string value you want them to render with. (ie: {model: ‘user’}) Note that these are implicitly passed from parents to children. So if you set them at the top-most call to 
&lt;code class=&quot;language-text&quot;&gt;Generate&lt;/code&gt;
 they will be passed down the tree and merged/overridden by any variables you set in those children.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Full Example:&lt;/strong&gt;
Model -&gt; Route Transformation with nested queries and responses.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;ask.forLens(‘queryProvider’, ‘The Lens your want to use for your create query’, ‘optic:query/create-record’)
function transform(input, answers) {
    var routeName = input.name.toLowerCase();

    var route = “/“ + routeName;
    var parameters = Object.keys(input.Schema).map(function(i) {
        return { in: ‘body’,
            name: i
        };
    });
    var routeDescription = {
        method: “post”,
        url: route,
        parameters: parameters
    };
    var queryDescription = {
        fields: Object.keys(input.Schema).reduce(function(previous, current) {
            previous[current] = Generate(‘optic:rest/parameter’, { in: ‘body’,
                name: current
            });
            return previous;
        }, {})
    };

    const newItemVariable = ‘item’

    return Generate(answers.output, routeDescription, {
        containers: {
            “callback”: [Generate(‘optic:mongoose/create-record’, queryDescription, {
                gearId: answers.queryProvider
                containers: {
                  “success”: [
                    Generate(‘optic:rest/response’, {status: 200}, {
                      ‘variables’: {
                        ‘returnObject’: newItemVariable
                      }
                    })
                  ],
                  “failure”: [
                    Generate(‘optic:rest/response’, {status: 400})
                  ]
                },
                ‘variables’: {
                  ‘newObject’: newItemVariable
                }
            })]
        }
    });
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Input Code:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;const toDo = mongoose.model(‘todo’, new mongoose.Schema({
    ‘message’: ‘string’,
    ‘isDone’: ‘string’
}))&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;Transformed into Create Route:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.post(‘/todo’, (req, res)=&amp;gt; {
  new toDo({
    message: req.body.message,
    isDone: req.body.isDone
  }).save((err, item)=&amp;gt; {
    if (!err) {
      res.send(200, item)
    } else {
      res.send(400, err)
    }
  })
})&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h2 id=&quot;mutating-transformations&quot;&gt;&lt;a href=&quot;#mutating-transformations&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Mutating Transformations&lt;/h2&gt;
&lt;p&gt;Optic also supports transformations that change the current code but don&apos;t generate anything new. We use this in our Redux skill for adding an action to an existing reducer. To use a mutate transformation you have to do two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Omit &lt;code class=&quot;language-text&quot;&gt;output&lt;/code&gt; from your annotation. This lets Optic know it should expect a mutation&lt;/li&gt;
&lt;li&gt;Return a call to the built-in Mutate function. &lt;code class=&quot;language-text&quot;&gt;return Mutate(...)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In mutation transformations you get a third argument containing Optic&apos;s internal id for the model you are mutating &lt;code class=&quot;language-text&quot;&gt;function transform(input, answers, modelId)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;Mutate&lt;/code&gt; function takes the &lt;code class=&quot;language-text&quot;&gt;modelId&lt;/code&gt;, an object containing changes to that node&apos;s value, and an optional options object.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Mutate(modelId, {&amp;quot;pathTo&amp;quot;: &amp;quot;new/value/file.js&amp;quot;})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here are the additional options you can pass &lt;code class=&quot;language-text&quot;&gt;Mutate&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tags - Used to update child nodes by their tag. `{&quot;tagName&quot;: Mutate(newValue, {options})}&lt;/li&gt;
&lt;li&gt;variables - Used to change all instances of a variable within this node and its children. &lt;code class=&quot;language-text&quot;&gt;{&amp;quot;variableName&amp;quot;: &amp;quot;newValue&amp;quot;)}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;variables - Used to change all instances of a variable within this node and its children. &lt;code class=&quot;language-text&quot;&gt;{&amp;quot;variableName&amp;quot;: &amp;quot;newValue&amp;quot;)}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;containers - Used to update the contents of a container. &lt;code class=&quot;language-text&quot;&gt;{&amp;quot;container&amp;quot;: Empty() || Append([items...]) || Prepend([items...]), ReplaceWith([items...]) || InsertAt(index, [items...])}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;multiple-transformation&quot;&gt;&lt;a href=&quot;#multiple-transformation&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Multiple Transformation&lt;/h2&gt;
&lt;p&gt;You can also create transformations that have multiple outputs. To create a multi-transformation all you have to do is return an array of &lt;code class=&quot;language-text&quot;&gt;Generate&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;Mutate&lt;/code&gt; calls. Optic will apply these changes in the order it receives them. As a matter of best practice perform all your work within the transformation and then return only the final changes to be pressed into code. Do not generate code and then mutate it. That will always be slower and less reliable.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Defining Schemas]]></title><description><![CDATA[Defining Schemas Schemas are used to define the data structures of different code entities. Schemas might be used to define the structure of…]]></description><link>https://useoptic.com/docs/authoring/defining-schemas</link><guid isPermaLink="false">https://useoptic.com/docs/authoring/defining-schemas</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;defining-schemas&quot;&gt;&lt;a href=&quot;#defining-schemas&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Defining Schemas&lt;/h1&gt;
&lt;p&gt;Schemas are used to define the data structures of different code entities. Schemas might be used to define the structure of a route (path, method, parameters, responses), a model (name, fields), or a page (elementTree, layout).&lt;/p&gt;
&lt;p&gt;Schemas are defined using [JSON Schema] draft-04 (&lt;a href=&quot;http://json-schema.org/&quot;&gt;http://json-schema.org/&lt;/a&gt;). The only hard requirement we impose is that the root schema must be of type &lt;code class=&quot;language-text&quot;&gt;object&lt;/code&gt;. Optic supports an optional extension to the Schema, an &lt;code class=&quot;language-text&quot;&gt;_order:[]&lt;/code&gt; array for objects that allows you to decide the order that fields will appear within Optic. By default, fields appear alphabetically.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should try to implement common Schemas whenever possible because they make Transformations more powerful. Always check if there are existing Schemas you can use before creating your own. If there is not one that suits your needs, consider adding a Transformation to a more general type (i.e. &lt;code class=&quot;language-text&quot;&gt;my-high-level-framework/controller&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;optic:rest/route&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Schemas are defined in markdown with the following annotation. Schema definitions require a code block to appear directly beneath them.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Schema {
	&quot;id&quot;: &quot;example&quot;,
	&quot;definition&quot;: {
		“title”: “Example Schema”,
		“type”: “object”,
		“properties”: {...}
	}} --&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;“title” within the JSON Schema sets the name used in visual presentations throughout Optic. The “ID” in the annotation sets the name you reference the schema by when defining knowledge&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Extending Optic]]></title><description><![CDATA[Extending Optic Optic can be extended by members of our community. We've built interfaces for adding new skills, 3rd party IDEs and new…]]></description><link>https://useoptic.com/docs/authoring/extending-optic</link><guid isPermaLink="false">https://useoptic.com/docs/authoring/extending-optic</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;extending-optic&quot;&gt;&lt;a href=&quot;#extending-optic&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Extending Optic&lt;/h1&gt;
&lt;p&gt;Optic can be extended by members of our community. We&apos;ve built interfaces for adding new skills, 3rd party IDEs and new programming languages. We encourage all users to get familiar with the skills API and Optic Markdown because understanding what Optic is doing behind the scenes will make the product easier to reason about.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/docs/authoring/writing-skills&quot;&gt;Writing new skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/docs/authoring/adding-optic-support-for-new-id-es&quot;&gt;Adding IDE Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adding new programming languages (docs coming soon. In the meantime check out &lt;a href=&quot;https://github.com/opticdev/parser-foundation&quot;&gt;parser-foundation&lt;/a&gt; and our &lt;a href=&quot;https://github.com/opticdev/es7-parser&quot;&gt;es7 module&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Writing Skills]]></title><description><![CDATA[Writing Skills You can teach Optic to do just about anything with your source code. Teams have built support for many popular libraries, to…]]></description><link>https://useoptic.com/docs/authoring/writing-skills</link><guid isPermaLink="false">https://useoptic.com/docs/authoring/writing-skills</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;writing-skills&quot;&gt;&lt;a href=&quot;#writing-skills&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Writing Skills&lt;/h1&gt;
&lt;p&gt;You can teach Optic to do just about anything with your source code. Teams have built support for many popular libraries, to generate their standard tests and one group even migrated to GraphQL using Optic.&lt;/p&gt;
&lt;p&gt;Before we get much deeper it&apos;s important to familiarize yourself with the first class citizens in Optic&apos;s Skill API and how they all fit together. Aidan made a &lt;a href=&quot;https://www.youtube.com/watch?v=LtDvl78kDDQ&quot;&gt;7 minute video&lt;/a&gt; introducing these concepts that we suggest you watch before proceeding.&lt;/p&gt;
&lt;p&gt;Skills are written in Optic Markdown and we offer tooling that makes building and testing Optic Markdown much easier.&lt;/p&gt;
&lt;h2 id=&quot;optic-markdown&quot;&gt;&lt;a href=&quot;#optic-markdown&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optic Markdown&lt;/h2&gt;
&lt;p&gt;Most of the world’s programming knowledge is kept in unstructured formats that are great for humans and useless to machines. This is unfavorable because there are many practical development tasks that could be automated if computers only knew what to do. Instead of trying to make our own standard and require people to maintain a whole other set of files, we decided to meet programming knowledge where it lives today: markdown.&lt;/p&gt;
&lt;p&gt;Optic Markdown relies on simple, invisible annotations in markdown to define Schemas, Lenses, and Transformations. &lt;a href=&quot;https://github.com/opticdev/optic-markdown&quot;&gt;Optic Markdown&lt;/a&gt; has been designed to store programming knowledge in a way that makes it accessible to be both humans and smart tools. You can create new documentation using Optic Markdown or you can update existing markdown documentation to work with Optic.&lt;/p&gt;
&lt;h2 id=&quot;compilation&quot;&gt;&lt;a href=&quot;#compilation&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Compilation&lt;/h2&gt;
&lt;p&gt;The Optic Markdown you include in your project goes through several stages before it is ready to be used by Optic.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/opticdev/optic-markdown/tree/master/src/parser&quot;&gt;Parse Phase&lt;/a&gt;&lt;/strong&gt;: Annotations and sample code are extracted from the markdown file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/opticdev/optic/blob/master/core/src/main/scala-2.12/com/opticdev/core/sourcegear/SGConstructor.scala&quot;&gt;Resolve Phase&lt;/a&gt;&lt;/strong&gt;: Optic Markdown can reference objects in other Optic Markdown files. In this phase all such dependencies are resolved.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/opticdev/optic/tree/master/core/src/main/scala-2.12/com/opticdev/core/compiler&quot;&gt;Compile Phase&lt;/a&gt;&lt;/strong&gt;: Schemas &amp;#x26; Transformations are validated. Optic generates a Parse &amp;#x26; Render method for each Lens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/opticdev/optic/blob/master/arrow/src/main/scala-2.12/com/opticdev/arrow/index/IndexSourceGear.scala&quot;&gt;Knowledge Graph Creation&lt;/a&gt;&lt;/strong&gt;: A knowledge graph (like the one in the video) with edges between every Schema, Lens and Transformation is saved. This graph is used in most of the queries the API runs.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;tooling&quot;&gt;&lt;a href=&quot;#tooling&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tooling&lt;/h2&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;optic-markdown&lt;/code&gt; npm package contains a GUI and other tooling that makes teaching/debugging Optic easier.&lt;/p&gt;
&lt;p&gt;You can validate an Optic Markdown file has a valid format by running:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;opticmd /path/to/file&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;If you want to use a GUI that makes it easier to build Lenses and Transformations you can use the trainer&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;opticmd starttrainer&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h1 id=&quot;fast-feedback&quot;&gt;&lt;a href=&quot;#fast-feedback&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Fast Feedback&lt;/h1&gt;
&lt;p&gt;If you want to develop Optic docs with live feedback, add them to an Optic project by listing their parent directory in your &lt;code class=&quot;language-text&quot;&gt;optic.yml&lt;/code&gt; file and importing your package with its identifier. Optic’s package manager resolves packages locally first before it looks in public/private Optic registries, so all of the changes you make here apply within a few seconds.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-yams&quot;&gt;&lt;code class=&quot;language-yams&quot;&gt;knowledge_paths:
  - /docs

skills:
  - username:new-package&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;You can test if your skills packages work by using Optic normally or by opening up our experimental debugger (Tools -&gt; Debugger in the main menu).&lt;/p&gt;
&lt;h1 id=&quot;next-steps&quot;&gt;&lt;a href=&quot;#next-steps&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Next Steps&lt;/h1&gt;
&lt;p&gt;Learn about creating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/docs/authoring/writing-lenses&quot;&gt;Lenses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/docs/authoring/defining-transformations&quot;&gt;Transformations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/docs/authoring/defining-schemas&quot;&gt;Schemas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Workflow]]></title><description><![CDATA[Workflow Optic’s workflow is designed with the following principles in mind:  Collaborative Development  - Optic collaborates with…]]></description><link>https://useoptic.com/docs/using/workflow</link><guid isPermaLink="false">https://useoptic.com/docs/using/workflow</guid><dc:creator><![CDATA[Optic Team]]></dc:creator><content:encoded>&lt;h1 id=&quot;workflow&quot;&gt;&lt;a href=&quot;#workflow&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Workflow&lt;/h1&gt;
&lt;p&gt;Optic’s workflow is designed with the following principles in mind: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Collaborative Development&lt;/strong&gt; - Optic collaborates with developers. It manages those code that you have asked it to, but it will affect code outside of that purview.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code is Truth&lt;/strong&gt; - Your code is the source of truth. Edit anything you want, including the code Optic generates. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Respect Developer Workflows&lt;/strong&gt; - Optic works with any IDE, language, and code. Developers should not have to change everything to take advantage of automation. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Dependencies&lt;/strong&gt; - Optic is a layer on top of your code. You can start or stop using it at any time. There’s no lock-in. &lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;the-app&quot;&gt;&lt;a href=&quot;#the-app&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The App&lt;/h1&gt;
&lt;p&gt;Optic is a standalone app that packages a local Optic code server and our GUI. You open it alongside your IDE and can leave it running for as long as you are coding. &lt;/p&gt;
&lt;p&gt;Each IDE has a lightweight plugin that forwards your current cursor position to Optic. &lt;/p&gt;
&lt;h1 id=&quot;the-eye&quot;&gt;&lt;a href=&quot;#the-eye&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Eye&lt;/h1&gt;
&lt;p&gt;Once Optic is opened, it will quietly watch you programming until it sees you working on something it can help with. When your cursor is over a section of code Optic understands the eye will light up: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/doc-images/lit.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;To open Optic ⌘CMD+Tab or click on the center of the Eye. &lt;/p&gt;
&lt;h2 id=&quot;read-more-about-using-the-app&quot;&gt;&lt;a href=&quot;#read-more-about-using-the-app&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Read More about using the App:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/docs/using/properties&quot;&gt;Properties Panel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/docs/using/search&quot;&gt;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/docs/using/transform&quot;&gt;Transform Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/docs/using/sync&quot;&gt;Sync Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[What's next for Optic]]></title><description><![CDATA[Hey everyone! Sorry it's been 1 month without an update post. Since last time I wrote there have been 3 releases with some big changes…]]></description><link>https://useoptic.com/blog/whats-next-for-optic</link><guid isPermaLink="false">https://useoptic.com/blog/whats-next-for-optic</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Tue, 17 Jul 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hey everyone! Sorry it&apos;s been 1 month without an update post.&lt;/p&gt;
&lt;p&gt;Since last time I wrote there have been 3 releases with some big changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optic has switched over entirely to Optic Markdown 2. Optic Markdown 2 is a lot easier to learn and comes bundled with a GUI (think JSFiddle) that will help you tinker with the behavior of your lenses and transformations&lt;/li&gt;
&lt;li&gt;There&apos;s a new installer flow that&apos;s more reliable and includes a guided tutorial to help new users learn Optic&lt;/li&gt;
&lt;li&gt;Array literals, argument lists and other array-like structures can be used in Optic lenses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the bug side...well there were a lot of them. Transitioning all the the compiler code over to the Optic Markdown 2 representation introduced a lot of bugs that took two weeks of on-and-off work to find and correct. Progress was stymied by the fact that our test suites were all tied to the Optic Markdown 1 format so I had to migrate both the code and the unit tests. If Optic was more mature I would migrated more slowly, but being small has some advantages and we&apos;re going to take them. The good news is that version 2 is a great foundation that supports pretty much everything you might need for your lenses so I don&apos;t anticipate it changing again in a wholesome way.&lt;/p&gt;
&lt;h2 id=&quot;company-update&quot;&gt;&lt;a href=&quot;#company-update&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Company Update&lt;/h2&gt;
&lt;p&gt;This spring Optic was accepted into YCombinator&apos;s summer batch so we&apos;ve been out in California moving as fast as we can to deliver value to our early users. We now have some development teams as customers and we&apos;re learning a lot about what it takes to build a product that serves developers and their team.&lt;/p&gt;
&lt;p&gt;We&apos;ve committed to always having a free and open source version of Optic. The only thing we&apos;ve been selling at this stage are our professional services and some specialty features for connecting a ton of repos and releasing private skills on our registry. There are a lot of other open source YC companies like GitLab and Docker we can learn from who have managed to be free/open source as well as viable businesses.&lt;/p&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a href=&quot;#whats-next&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What&apos;s Next&lt;/h2&gt;
&lt;p&gt;It&apos;s clear that making it easy to teach Optic new skills is critical to the long term growth of our community. A lot of developers who see Optic love the potential, but don&apos;t have time to teach it how to interact with their code. We&apos;ve been trying to release as many skills as possible for the common libraries, but those efforts will probably never keep up pace with the needs of our users.&lt;/p&gt;
&lt;p&gt;With that in mind, we&apos;re focused on a few keys areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Making the trainer feature complete (It still doesn&apos;t support transformations of mapping schemas)&lt;/li&gt;
&lt;li&gt;Making our docs amazing&lt;/li&gt;
&lt;li&gt;Making skills more discoverable by adding a page on our website that indexes all the previously developed skills&lt;/li&gt;
&lt;li&gt;General usability. Optic is getting a redesign based on several months of user feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;more-languages&quot;&gt;&lt;a href=&quot;#more-languages&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;More Languages&lt;/h2&gt;
&lt;p&gt;We don&apos;t have exact release dates yet, but Python and Ruby are going to be released soon. We&apos;ve realized our current pipeline for learning languages is more complicated than it needs to be and we&apos;re planning to update Marvin and make it much easier to train Optic on a corpus of source code. Ideally we&apos;ll make this process easy enough that we can release a language spec that any developer can use to build new language support.&lt;/p&gt;
&lt;h2 id=&quot;thanks-for-your-support-now-that-optic-core-is-at-a-pretty-stable-phase-of-development-the-next-several-updates-you-read-will-be-all-about-optic-skills-and-were-making-it-easier-to-create-them&quot;&gt;&lt;a href=&quot;#thanks-for-your-support-now-that-optic-core-is-at-a-pretty-stable-phase-of-development-the-next-several-updates-you-read-will-be-all-about-optic-skills-and-were-making-it-easier-to-create-them&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks for your support! Now that optic-core is at a pretty stable phase of development, the next several updates you read will be all about Optic skills and we&apos;re making it easier to create them.&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Better Transformations]]></title><description><![CDATA[As we’ve been adding skills to Optic (yes that’s the new name for Optic Knowledge), we’ve found ourself playing critical feature whack-a…]]></description><link>https://useoptic.com/blog/better-transformations</link><guid isPermaLink="false">https://useoptic.com/blog/better-transformations</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Sat, 16 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As we’ve been adding skills to Optic (yes that’s the new name for Optic Knowledge), we’ve found ourself playing critical feature whack-a-mole. We definitely underestimated the number of critical use cases to get some of the everyday libraries and SDKs developers love supported. The good news is we’re just about there.&lt;/p&gt;
&lt;p&gt;As reported last week we’ve already added support this month for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mutating transformations — transformations that change existing code. Supports things like “Add Action to Reducer” for Redux&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi transformation — transform one kind of code into multiple other types of code. Supports transformations that need to write to multiple files.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This week we finished what we believe are the last core engines needed for a while:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Insert locations — allows you to create new files as part of a transformation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parser proxies — enables lenses to be created with otherwise invalid source code. For instance putting a Case statement in the top level of a code snippet won’t parse. Parser proxies allow parser authors to define a wrapper on a per AST Type basis to overcome this limitation. End users won’t have to think about these but they are important.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi Node Lenses — allows you to create a lens composed of n number of AST Nodes. User cases include creating a lens for Redux Containers. Each with a Component, PropTypes, MapStateToProps, Connect and Export node. Multi Node lenses behave like any other lens and can be synced.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sublime support added. Ajay Patel from &lt;a href=&quot;https://www.plasticity.ai&quot;&gt;Plasticity&lt;/a&gt; finished the plugin. We’ll be packaging this in the next version of the installer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;whats-next&quot;&gt;&lt;a href=&quot;#whats-next&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What’s Next&lt;/h3&gt;
&lt;p&gt;This next release is already very big and contained a lot of risky features. It’s nearly ready to go but we’re going to delay it a little longer.&lt;/p&gt;
&lt;p&gt;We want to switch our focus for the remainder of the summer from new features to building Optic’s repository of skills. To help with this task we feel like we have to make sure Optic Markdown 2 is part of this release.&lt;/p&gt;
&lt;p&gt;Optic Markdown 2 is going to make it easier than ever to teach Optic new skills. It’s designed around the premise that Training &gt; Explaining. Right now Optic Markdown is very verbose and requires users to fully grasp our system before they can make anything useful. V2 deploys some of the code pattern matching tech that makes Optic work to that training process.&lt;/p&gt;
&lt;p&gt;In v1 users created lenses by giving a example snippet and then defining extractors to read/write certain properties of from that code. In v2 you provide a sample snippet and the expected JSON model to describe the code. Optic will search sample space and figure out how to round trip the code. If there are ambiguities that need resolution Optic will ask questions to resolve them and advanced users will still be able to override Optic’s decisions when needed.&lt;/p&gt;
&lt;p&gt;It’s really cool and I’ve already seen some first time Optic users take advantage of the system without any coaching.&lt;/p&gt;
&lt;h2 id=&quot;thanks-for-supporting-optic-we-hope-youre-ready-for-the-big-release&quot;&gt;&lt;a href=&quot;#thanks-for-supporting-optic-we-hope-youre-ready-for-the-big-release&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks for supporting Optic! We hope you’re ready for the big release.&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Optic Installer]]></title><description><![CDATA[The last week and a half were dedicated to responding to the biggest issues our early users faced, launching our beautiful new website, and…]]></description><link>https://useoptic.com/blog/optic-installer</link><guid isPermaLink="false">https://useoptic.com/blog/optic-installer</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Sun, 10 Jun 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The last week and a half were dedicated to responding to the biggest issues our early users faced, launching our beautiful new website, and increasing the scope of what you can accomplish with transformations.&lt;/p&gt;
&lt;h3 id=&quot;new-website--video&quot;&gt;&lt;a href=&quot;#new-website--video&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;New Website &amp;#x26; Video&lt;/h3&gt;
&lt;p&gt;In the beginning of June our website got a big overhaul in a collaboration between &lt;a href=&quot;http://www.diagramoffice.co/&quot;&gt;Diagram Office&lt;/a&gt;, a studio run by &lt;a href=&quot;http://www.diagramoffice.co/information.html&quot;&gt;Sam Cox&lt;/a&gt;, and &lt;a href=&quot;http://www.praxis-story.com/&quot;&gt;Praxis&lt;/a&gt; which is run by &lt;a href=&quot;https://twitter.com/nicholas_sailer?lang=en&quot;&gt;Nicholas Sailer&lt;/a&gt;. The guys did great work and rather than post pictures here I’ll just encourage you all to &lt;a href=&quot;http://useoptic.com&quot;&gt;check it out&lt;/a&gt; and share your feedback.&lt;/p&gt;
&lt;p&gt;We also produced a &lt;a href=&quot;https://www.youtube.com/watch?v=sMXcKMKYZ8c&quot;&gt;comprehensive product video&lt;/a&gt; that gives a brief demo of how Optic works. The video has gotten great reviews so far and many people have shared with me that it helped them “get” Optic. If you’re curious about the details behind Optic you should take a look.&lt;/p&gt;
&lt;h3 id=&quot;the-installer&quot;&gt;&lt;a href=&quot;#the-installer&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Installer&lt;/h3&gt;
&lt;p&gt;Over the last two weeks we took a good look at our website analytics and realized that something didn’t add up. We were seeing hundreds of downloads a day, but very few users managed to get Optic working on their machines. After talking to some of these users who failed to get Optic installed we realized our install process needed to be improved.&lt;/p&gt;
&lt;p&gt;So we built and shipped an installer for Optic and we made it accessible over the command line. Just type “npm install optic-installer -g” and it will start our CLI installer wizard. We’ve made the optic-installer the only supported way to install Optic and since making that change we’ve seen 100% of people who use the installer get Optic installed successfully.&lt;/p&gt;
&lt;p&gt;The Wizard:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Installs the standalone Optic App&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Installs Optic plugins to any supported IDEs on your computer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Launches the Optic Demo Project for you&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2424/1*VELJT7ULvQgxDtr3gdzodg.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2852/1*0ZSutI47DfxAlkqjqfHRWg.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;enhanced-transformations&quot;&gt;&lt;a href=&quot;#enhanced-transformations&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enhanced Transformations&lt;/h3&gt;
&lt;p&gt;As more users have gotten into Optic it became apparent that we needed to expand the scope of the transformations system. Over the last week and a half we’ve added support for the following types of transformations. You can check out their feature branches on GitHub now or wait for the next release that comes out this week.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mutating Transformations **bring&lt;/strong&gt; &lt;strong&gt;the&lt;/strong&gt; **ability to use a transformation to mutate an existing model or set of models. Some examples where this might come in handy is if you wanted to “Add OAuth to Route” or “Add Action to Reducer”. You can already update a model’s properties in Optic, but until now you couldn’t update an existing model’s children nodes. By bringing this capability to Optic in the form of a transformation we make it possible to bridge multiple sections of Optic knowledge together into one useful patch.&lt;/p&gt;
&lt;p&gt;Mutating transformations are not designed to work with the sync system. They’re meant to be used as one time commands to add features to your existing code.&lt;/p&gt;
&lt;p&gt;**Multi-Transformations **allow transformation functions to do multiple things at once. You can create a multi-transformation by returning an array of ‘Generate’ or ‘Mutate’ calls in a transformation function. These calls can be used to stage changes within the same file (“Generate all the CRUD routes for User”) or across multiple files (“Add Action to Reducer”).&lt;/p&gt;
&lt;p&gt;Multi-Transformations also can not by synced, but since they are are** **composed of a series of transformations each of those can sync. For instance if you generated all the CRUD routes for a model, each individual route would sync directly with the model not by way of the multi-transformation that created it.&lt;/p&gt;
&lt;h2 id=&quot;thank-you-everyone-for-your-continued-support-stay-tuned-for-the-upcoming-release-the-new-transformations-will-enable-a-lot-more-use-cases&quot;&gt;&lt;a href=&quot;#thank-you-everyone-for-your-continued-support-stay-tuned-for-the-upcoming-release-the-new-transformations-will-enable-a-lot-more-use-cases&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thank you everyone for your continued support. Stay tuned for the upcoming release. The new transformations will enable a lot more use cases!&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[1.0 Launched]]></title><description><![CDATA[Over the last two weeks we finished testing the release candidate for 1.0 and we’re happy to announce that today we’ve launched! There is a…]]></description><link>https://useoptic.com/blog/1-0-launched</link><guid isPermaLink="false">https://useoptic.com/blog/1-0-launched</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Wed, 30 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Over the last two weeks we finished testing the release candidate for 1.0 and we’re happy to announce that today we’ve launched! There is a complete redesign of our website coming later this week to go along with the launch so keep your eyes open for that.&lt;/p&gt;
&lt;p&gt;Here are the release notes for 1.0:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s New:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved performance of context queries. They now process on their own thread&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correct version of Markdown now ships with each Optic build.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removed requirement for Node &amp;#x26; NPM to run Optic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated Editor Connection API to support IDEs that monitor the disk for changes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated documentation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New Optic Markdown version has production support for mapSchemaToObject property.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bug Fixes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Properties no longer throws errors with more complex schemas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comments between AST Nodes no longer being deleted on code inserts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sync triggering from the main menu fails gracefully now if there are no projects loaded into Optic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Excluded paths are no longer parsed by Optic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;optic-grant-program-update&quot;&gt;&lt;a href=&quot;#optic-grant-program-update&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optic Grant Program Update&lt;/h3&gt;
&lt;p&gt;Since we launched the &lt;a href=&quot;https://useoptic.com/grants/&quot;&gt;Optic Development Grants&lt;/a&gt; program 10 days ago we’ve had several developers apply to create Optic plugins for their favorite IDEs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Aaronm14&quot;&gt;Aaron Mead&lt;/a&gt; built the VSCode plugin and published the first version on the Visual Studio Marketplace.
Download Link: &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=useoptic.optic&quot;&gt;https://marketplace.visualstudio.com/items?itemName=useoptic.optic&lt;/a&gt;
Source Code: &lt;a href=&quot;https://github.com/opticdev/optic-vscode-plugin&quot;&gt;https://github.com/opticdev/optic-vscode-plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another developer has applied for the Sublime grant and is beginning work tonight.&lt;/p&gt;
&lt;p&gt;Aidan wanted to test out the spec he wrote for grant applicants so he built a plugin for all the JetBrains IDEs (his favorites) this week.
Download Link: [Pending JetBrains Approval]
Source Code: &lt;a href=&quot;https://github.com/opticdev/optic-intellij-platform-plugin&quot;&gt;https://github.com/opticdev/optic-intellij-platform-plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With these new additions Optic now supports VSCode, Atom, WebStorm, IntelleJ, PHPStorm and the rest of the JetBrains products. In the next week we anticipate having Sublime finished as well.&lt;/p&gt;
&lt;h3 id=&quot;mern-mongoose-express-react-node-stack&quot;&gt;&lt;a href=&quot;#mern-mongoose-express-react-node-stack&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;MERN (Mongoose, Express, React, Node) Stack&lt;/h3&gt;
&lt;p&gt;We went all in on adding some useful knowledge for the MERN Stack. Now users can generate Mongoose Queries, CRUD routes, and client side networking code using RequestJS. The entire stack has been Sync enabled so when you make manual changes to your models or API, Optic will propagate those changes across your project.&lt;/p&gt;
&lt;p&gt;You can check out an example of Optic being used with the MERN stack here in our new To Do Demo App: &lt;a href=&quot;https://github.com/opticdev/optic-demo-project&quot;&gt;https://github.com/opticdev/optic-demo-project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to try it out in your own project, be sure to add these knowledge packages to your optic.yml file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;optic:express-js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optic:rest&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optic:mongoose&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;optic:requestjs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;stay-tuned-for-more-updates-thanks-for-trying-optic&quot;&gt;&lt;a href=&quot;#stay-tuned-for-more-updates-thanks-for-trying-optic&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Stay Tuned for More Updates! Thanks for Trying Optic&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Finished Sync]]></title><description><![CDATA[We’re very close to releasing Optic 1.0 and this week we added a bunch of powerful features across our suite of projects. We plan to publish…]]></description><link>https://useoptic.com/blog/finished-sync</link><guid isPermaLink="false">https://useoptic.com/blog/finished-sync</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Sun, 13 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;We’re very close to releasing Optic 1.0 and this week we added a bunch of powerful features across our suite of projects. We plan to publish a release candidate by Tuesday the 15th and our official 1.0 by the end of the month.&lt;/p&gt;
&lt;h3 id=&quot;optic-app&quot;&gt;&lt;a href=&quot;#optic-app&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optic App&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;This week we finished the GUI for Optic’s sync feature. Here’s a quick video demonstrating how you would sync your app’s routes with your data models:&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;&quot;
          &gt;
            &lt;center&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/h42rxrO4KPQ&quot; frameborder=&quot;0&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;&lt;/center&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;The properties editor can now display and modify key/value pairs from objects.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;optic-markdown&quot;&gt;&lt;a href=&quot;#optic-markdown&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optic Markdown&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Schemas in Optic Markdown can now reference other schemas in the same markdown file. Before this update authors has to copy/paste shared schemas around the same markdown file. Now you can access other schemas by their name by using the “#/definitions/internal/” namespace in your references.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*KR1iwm0SYWUpngLC7yHBXQ.png&quot;&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Lenses now support initial values. These initial values then have all the other fields Optic extracts from the code applied on top of them. This can be useful if you have a lens that serves as an enum or if a lens implements a schema but does not assign some of its fields.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To use this feature add a key called initial in your Lens definitions and set it equal to a quoted JSON string. ie initial=“{…}”&lt;/p&gt;
&lt;h3 id=&quot;es7-parser&quot;&gt;&lt;a href=&quot;#es7-parser&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;es7 Parser&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;JSX is now supported via &lt;a href=&quot;https://github.com/RReverser/acorn-jsx&quot;&gt;https://github.com/RReverser/acorn-jsx&lt;/a&gt;. Now you can build lenses that are made up of JSX Components.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;thanks-for-your-support-t-2-days-&quot;&gt;&lt;a href=&quot;#thanks-for-your-support-t-2-days-&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks for your support. T-2 days :)&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Starting Sync]]></title><description><![CDATA[This post is the update for both the week of the 22nd and the week of the 29th. Sync Design During the week of the 22nd we focused…]]></description><link>https://useoptic.com/blog/starting-sync</link><guid isPermaLink="false">https://useoptic.com/blog/starting-sync</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Mon, 07 May 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This post is the update for both the week of the 22nd and the week of the 29th.&lt;/p&gt;
&lt;h3 id=&quot;sync-design&quot;&gt;&lt;a href=&quot;#sync-design&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sync Design&lt;/h3&gt;
&lt;p&gt;During the week of the 22nd we focused exclusively on designing the sync feature. We made some important design choices that we want to share with the community:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**No hidden information — **Optic doesn’t guess what you want to sync or keep the relationships in some unreadable config file. All the relationships between parts of your code appear within the code itself. Annotations are used to name the models found in your code and then set those models as the source of another part of code. When you transform code these annotations will be added automatically unless you opt-out of creating a relationship between the source of the transformation and its output.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2852/1*-BfaATdXbueW4SEgDlva9A.png&quot; alt=&quot;“//name: User Model” names this section of code “User Model”&quot;&gt;&lt;em&gt;“//name: User Model” names this section of code “User Model”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2852/1*idNA2TOumhnIqOsBakFsDw.png&quot; alt=&quot;“//source: User Model -&gt; optic:mongoose@0.1.0/createroutefromschema” defines a relationship between “User Model” and this section of code. Changes to “User Model” will trigger changes to this code.&quot;&gt;&lt;em&gt;“//source: User Model -&gt; optic:mongoose@0.1.0/createroutefromschema” defines a relationship between “User Model” and this section of code. Changes to “User Model” will trigger changes to this code.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;**Sync will not happen automatically — **Let’s be realistic, the last thing any of us want is a bot making unannounced changes to our code as we work. Optic maintains a dependency graph of all the key sections of code and when it sees a change that will trigger a sync it notifies the programmer. The programmer can then review Optic’s pull request, make any changes they see fit, and update the source code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Sync Pull Requests walk entire tree — **The sync graphs Optic constructs for a project can be very complex. For instance a form might be synced with a route, which might be synced with a model definition (User Model -&gt; User Create Route -&gt; User Create Form). If you change the User Model, Optic will walk the entire sync graph and stage changes for each affected relationship. There are sanity checks built in that ignore circular dependencies and other invalid states that could happen when computing the patch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Single Project (Sorry!) — **In Version 1.0 of Optic (launching this month) the sync feature will only work within the context of a single project. We’re working to make it available across multiple projects i.e. your node backend syncs with your Android Kotlin Project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;sync-implementation&quot;&gt;&lt;a href=&quot;#sync-implementation&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sync Implementation&lt;/h3&gt;
&lt;p&gt;During the week of the 29th we implemented the entire Version 1.0 Sync Feature within the optic-core project (&lt;a href=&quot;https://github.com/opticdev/optic/tree/feature/sync&quot;&gt;see feature branch here&lt;/a&gt;). Here’s a quick slideshow of sync in action:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/5760/1*oxoN8zJTOjdLtfeDE-eB2A.png&quot; alt=&quot;Here we have a Model Definition for Users and a Post Route we created by transforming that model. If you calculate a sync diff on this example you get no changes&quot;&gt;&lt;em&gt;Here we have a Model Definition for Users and a Post Route we created by transforming that model. If you calculate a sync diff on this example you get no changes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/5760/1*A_sYsrJx17OQwKLwCnlqGQ.png&quot; alt=&quot;Here we’ve changed the name of the model from ‘users’ to ‘people’ and added a new field ‘age’. Before Optic you’d have to manually find and update all the code that depended on the shape of your model. Optic can generate a patch to make these updates for you without overwriting other code you wrote.&quot;&gt;&lt;em&gt;Here we’ve changed the name of the model from ‘users’ to ‘people’ and added a new field ‘age’. Before Optic you’d have to manually find and update all the code that depended on the shape of your model. Optic can generate a patch to make these updates for you without overwriting other code you wrote.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/5732/1*9-72GbPoF6kNwb4fiG4Jdw.png&quot; alt=&quot;Here’s a look at the Pull Request Optic generated for this file after you changed the model&quot;&gt;&lt;em&gt;Here’s a look at the Pull Request Optic generated for this file after you changed the model&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As you can see, we’ve only implemented this on the backend. Our next week of work is going to be dedicated to adding a GUI for Sync to the Optic App.&lt;/p&gt;
&lt;h3 id=&quot;some-more-thoughts-on-sync&quot;&gt;&lt;a href=&quot;#some-more-thoughts-on-sync&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Some more thoughts on Sync&lt;/h3&gt;
&lt;p&gt;For months it’s been clear that the sync feature was going to be one of Optic’s big selling points to teams of programmers. To be completely honest I thought it was going to be a months long project to build sync and that really worried me. But the more I thought about it the easier I realized the task would be. The entire backend implementation ended up taking a little less than 8 days.&lt;/p&gt;
&lt;p&gt;How was that possible? Well I had basically everything I needed already built. Optic can extract models from code and update source code to reflect arbitrary changes to those models — that takes care of all sync’s interactions with the raw source code. Optic also maintains a graph of all the code it recognizes in your project — a new edge type ‘DerivedFrom’ was all we needed to store sync relationships. And when it comes time to apply a patch, Arrow’s Change Evaluation interface makes it dead simple to post changes to the code base.&lt;/p&gt;
&lt;p&gt;Optic’s core abstractions made a feature like sync a one week project (&lt;a href=&quot;https://github.com/opticdev/optic/blob/feature/sync/core/src/main/scala-2.12/com/opticdev/core/sourcegear/sync/DiffSyncGraph.scala&quot;&gt;the diff function was the hardest part&lt;/a&gt;). Imagine what else might be possible? What else could you automate? What analytics could you provide teams about their code? What kind of visual tools could you build on top of a codebase?&lt;/p&gt;
&lt;h2 id=&quot;thanks-for-all-your-support-10-is-coming-soon&quot;&gt;&lt;a href=&quot;#thanks-for-all-your-support-10-is-coming-soon&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks for all your support! 1.0 is coming soon&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Optic Markdown CLI]]></title><description><![CDATA[On April 21st we released Beta 7 which support for our public registry to Optic. Now you can include knowledge in your project just by…]]></description><link>https://useoptic.com/blog/optic-markdown-cli</link><guid isPermaLink="false">https://useoptic.com/blog/optic-markdown-cli</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On April 21st we released Beta 7 which support for our public registry to Optic. Now you can include knowledge in your project just by declaring the package you want in your optic.yaml file.&lt;/p&gt;
&lt;p&gt;We also released updates to our optic-markdown cli that make it possible to publish your own packages to our public registry. To learn more about publishing knowledge publicly or to other members of your team check out &lt;a href=&quot;http://opticdev.com/docs/#/?id=publishing-knowledge&quot;&gt;our docs&lt;/a&gt;. Whether you’re ready to publish something right now or not everyone should make sure they create an account and reserve a namespace on our registry.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run “npm install optic-markdown -g”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then run “opticmd createuser”. That’s it, now you can publish to ‘yournamespace:packageName’ whenever you create a new package you’d like to share.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*SY6803cboyuxOTVhhemtZQ.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;whats-next&quot;&gt;&lt;a href=&quot;#whats-next&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What’s Next&lt;/h3&gt;
&lt;p&gt;Getting the registry deployed took longer than expected but we still finished up our April roadmap 9 days ahead of schedule. This means we’re starting the sync feature this week and we plan to release it mid-May. There won’t be any material releases between now and then, but we will push up 1 or 2 releases to address any bugs that our Beta Testers discover.&lt;/p&gt;
&lt;p&gt;After sync we’re going to spend some time making error handling less opaque and then polishing up Optic for the end of the Beta and her 1.0 release.&lt;/p&gt;
&lt;h3 id=&quot;to-our-beta-testers-thank-you-for-sharing-your-enthusiasm-and-insights-with-us-day-in-and-day-out-good-stuff-coming-soon-&quot;&gt;&lt;a href=&quot;#to-our-beta-testers-thank-you-for-sharing-your-enthusiasm-and-insights-with-us-day-in-and-day-out-good-stuff-coming-soon-&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;To our Beta Testers, thank you for sharing your enthusiasm and insights with us day in and day out. Good stuff coming soon :)&lt;/h3&gt;</content:encoded></item><item><title><![CDATA[OPM Live]]></title><description><![CDATA[On April 10th we released Beta 6 (read  changelog here ). This update fixed a lot of internal issues with resolving and referencing SDK…]]></description><link>https://useoptic.com/blog/opm-live</link><guid isPermaLink="false">https://useoptic.com/blog/opm-live</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Mon, 16 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On April 10th we released Beta 6 (read &lt;a href=&quot;https://github.com/opticdev/macos-release-tracker/releases/tag/Beta-Release-6&quot;&gt;changelog here&lt;/a&gt;). This update fixed a lot of internal issues with resolving and referencing SDK objects in dependencies and set the stage for the release of the public OPM Registry.&lt;/p&gt;
&lt;h3 id=&quot;registry-status&quot;&gt;&lt;a href=&quot;#registry-status&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Registry Status&lt;/h3&gt;
&lt;p&gt;This week we wrote the registry and since we did it in scala, we were able to make use of the common &amp;#x26; opm packages that are part of the core project. V1 supports creating accounts, registering namespaces, publishing new versions, and collecting a list of packages and their dependencies — all that we need right now. Everything works locally and this week we’ll be pushing it to a production environment on AWS. Beta 7 (coming this week) will implement a new provider that looks up and includes packages from the registry.&lt;/p&gt;
&lt;h3 id=&quot;editor-love&quot;&gt;&lt;a href=&quot;#editor-love&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Editor Love&lt;/h3&gt;
&lt;p&gt;Some users have asked us to help them build support for favorite IDEs. This week we laid the groundwork for any user to build an Optic plugin for their favorite IDE by releasing a &lt;a href=&quot;https://github.com/opticdev/optic-editor-plugin-spec&quot;&gt;detailed editor plugin spec&lt;/a&gt;. In addition to the spec we released a &lt;a href=&quot;https://github.com/opticdev/optic-editor-python-sdk&quot;&gt;python sdk&lt;/a&gt; and updated our &lt;a href=&quot;https://github.com/opticdev/optic-editor-javascript-sdk&quot;&gt;javascript sdk&lt;/a&gt;. If your favorite IDE implements their plugins/extensions using one of those two target languages the process of building an Optic plugin has been rendered pretty trivial.&lt;/p&gt;
&lt;p&gt;A big thank you to our first outside contributor &lt;a href=&quot;https://github.com/dbryand&quot;&gt;Dave Bryand&lt;/a&gt; for starting the Optic &lt;a href=&quot;https://github.com/opticdev/optic-vim-plugin&quot;&gt;plugin for Vim&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a href=&quot;#whats-next&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What’s Next?&lt;/h2&gt;
&lt;h3 id=&quot;syncing&quot;&gt;&lt;a href=&quot;#syncing&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Syncing&lt;/h3&gt;
&lt;p&gt;Most of the code programmers write is derivative. For example, we define &lt;strong&gt;models&lt;/strong&gt; that become &lt;strong&gt;routes **which are then consumed by&lt;/strong&gt; Forms** or **API Calls. **When you make a change to one of these sources of truth, for instance a model’s schema, the routes, forms and networking code in your app changes in a deterministic way. Many hours go into making these manual updates every single day and the monotony of the task makes the updates prone to bugs or omissions.&lt;/p&gt;
&lt;p&gt;Optic is going to automate all those menials tasks by allowing programmers to specify relationships between different parts of their codebases. When a change is made to one of these sources of truth, Optic will calculate a diff and notify the programmer of the changes it thinks they should make. This functionality can even work between projects (ie changes to a Rest API written in Java affecting the networking code and forms of your React frontend).&lt;/p&gt;
&lt;p&gt;Syncing is the last big feature on Optic’s V1 Roadmap and we plan to release it in mid-May.&lt;/p&gt;
&lt;h2 id=&quot;thanks-to-all-our-beta-testers--contributors&quot;&gt;&lt;a href=&quot;#thanks-to-all-our-beta-testers--contributors&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks to all our Beta Testers &amp;#x26; Contributors!&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[OPM & Auto-Updating]]></title><description><![CDATA[This week we were able to put out two more Beta releases. Beta 4 came out on March 26th and enabled automatic updating for Optic. Users of…]]></description><link>https://useoptic.com/blog/opm-auto-updating</link><guid isPermaLink="false">https://useoptic.com/blog/opm-auto-updating</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Mon, 02 Apr 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This week we were able to put out two more Beta releases.&lt;/p&gt;
&lt;p&gt;Beta 4 came out on March 26th and enabled automatic updating for Optic. Users of version Beta 4 or later can click Optic -&gt; Check for Updates to install the latest version or wait to be autoupdated automatically (checked once a day if app is running).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*7V11IsX6hhoK6ZnknP71zA.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Beta 5 was finished April 1st. Within Beta 5 we released a debugger for Optic Markdown and some major performance enhancements. If you already downloaded Beta 4, the patch to Beta 5 is just 3.75MB, but it packs a lot of big changes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/5760/1*tnyylVQjmxtItwYRKS9Itg.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;debugging-optic-markdown&quot;&gt;&lt;a href=&quot;#debugging-optic-markdown&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Debugging Optic Markdown&lt;/h3&gt;
&lt;p&gt;The feedback loop for Optic Markdown development has been too long and many users asked for some sort of debugging tool that would allow them to develop their Optic Markdown faster.&lt;/p&gt;
&lt;p&gt;We decided to use Optic’s powerful code analysis capabilities to bootstrap our own Optic Markdown debugger. As you edit markdown files, Optic will read them and generate a visual representation of the annotations in your code. Just like you’d expect from Optic, the annotation you are currently editing is the one that is displayed and changes are rendered in real time.&lt;/p&gt;
&lt;p&gt;Right now the debugger supports lens definitions. Support for schemas, transformations and some other refinements are coming out over the next few weeks.&lt;/p&gt;
&lt;p&gt;To try the debugger out for yourself go to the menu bar and click Tools -&gt; Debugger or ⌘(Command) D.&lt;/p&gt;
&lt;p&gt;Here’s the full change log (all built this week):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Incorporated Sparkle Project into Optic for automatic, patch based, updating&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added a pre-loader to the Optic Eye so people know when Optic is warming up/ready&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optic Markdown Debugger View (Tools -&gt; Debugger)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Much faster realtime processing. We open sourced &lt;a href=&quot;https://github.com/opticdev/akka-faddish-mailbox&quot;&gt;the custom Akka router and mailbox&lt;/a&gt; we used to achieve this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optic Markdown Migration support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added Debugger Support to Agent-SDK&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bug Fixes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed an issue where Optic Project Graphs were not returning the valid results for certain files&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a href=&quot;#whats-next&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What’s Next&lt;/h2&gt;
&lt;h3 id=&quot;location&quot;&gt;&lt;a href=&quot;#location&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Location&lt;/h3&gt;
&lt;p&gt;Right now Optic renders new code in the same file the user is currently editing. In the next week we’re going to make it possible for users to specify where they want their code to be generated. This capability brings some baggage with it, specifically importing/exporting different objects between files. At this point it’s unclear what expectations the first implementation of Location will be able to deliver on. Ideally we’d love all code to be fully executable upon generation, but some of these complications may make it difficult to deliver on that right away. We’ll strive to find a good balance between usability, predictability and complexity in our first iteration of this feature.&lt;/p&gt;
&lt;h3 id=&quot;opm-registry-goes-live&quot;&gt;&lt;a href=&quot;#opm-registry-goes-live&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OPM Registry Goes Live&lt;/h3&gt;
&lt;p&gt;I’ve seen some really cool Optic use cases developed by our users but those experiences are hard to share. There’s been a lot of emailing Optic Markdown around between beta users and clearly its time to take the OPM Registry live. Right now the OPM (Optic Package Manager) only supports local providers. By the middle of April, it’ll be able to resolve any published package that is referenced in your optic.yaml file.&lt;/p&gt;
&lt;p&gt;This is where our community starts. We can’t wait to see and share what everyone is working on!&lt;/p&gt;
&lt;h2 id=&quot;thanks-so-much-to-all-our-beta-testers&quot;&gt;&lt;a href=&quot;#thanks-so-much-to-all-our-beta-testers&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks so much to all our Beta Testers!&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Advanced Transformations]]></title><description><![CDATA[This week we released Optic Beta 3 which came out on March 25th. You can go download it  here . The major feature we released this week are…]]></description><link>https://useoptic.com/blog/advanced-transformations</link><guid isPermaLink="false">https://useoptic.com/blog/advanced-transformations</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Sun, 25 Mar 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This week we released Optic Beta 3 which came out on March 25th. You can go download it &lt;a href=&quot;http://opticdev.com/get-optic/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The major feature we released this week are Advanced Transformations. We announced this feature and the rationale behind it in our last &lt;a href=&quot;https://medium.com/optic-blog/weekly-update-march-12-18-12a0e3aca9a5&quot;&gt;Weekly Update&lt;/a&gt;. At the time we thought it would take around 2 weeks to finish so we’re happy to ship it a week early.&lt;/p&gt;
&lt;p&gt;Advanced transformations allow you to use one section of code to generate another section of code. The updates we’ve made allow these transformations to pull from an arbitrary number of Optic knowledge packages to render a complex piece of code. For instance a Model can be turned into a Create Route by connecting the knowledge from Express-JS and Mongoose into one section of code.&lt;/p&gt;
&lt;iframe src=&quot;https://medium.com/media/29209ef4cf062647545ddf00390e3891&quot; frameborder=0&gt;&lt;/iframe&gt;
&lt;p&gt;Here’s the full change log (all built this week):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Advanced Transformations fully supported. You can see &lt;a href=&quot;https://github.com/opticdev/optic/commit/21f62348c513c26439a42e6fafe9357463068239&quot;&gt;the commit here&lt;/a&gt; and &lt;a href=&quot;https://opticdev.com/docs/#/?id=defining-transformations&quot;&gt;read the docs here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated Transform SDK Objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ask SDK for Optic Markdown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nested code rendering API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All Renders go through the same code generation pipeline now&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object Literals can have generated code used as their values&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Knowledge graphs can now be serialized, sent to the client, and used to present dropdown options/autocompletions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Markdown parsing caches for better performance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bug Fixes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed issues where Node/NPM install checks were showing on startup even if those programs were installed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed issues with Schema References not working for some version numbers&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;whats-next&quot;&gt;&lt;a href=&quot;#whats-next&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What’s Next:&lt;/h2&gt;
&lt;h3 id=&quot;update-pipeline&quot;&gt;&lt;a href=&quot;#update-pipeline&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Update Pipeline:&lt;/h3&gt;
&lt;p&gt;As discussed last week, we’re trying to figure out the way to push Optic releases to our users. We’d prefer Optic to be like a website where we could update the system several times a day, but that isn’t feasible with a desktop app.&lt;/p&gt;
&lt;p&gt;Before we push any new Optic capabilities we’re going to spend a few days incorporating &lt;a href=&quot;https://github.com/sparkle-project/Sparkle&quot;&gt;Sparkle&lt;/a&gt; into the Optic macOS app. This will enable us to push patches (5–10MB) to our users when they open the Optic App. With those changes in place we’ll be able to push out changes as soon as they pass our integration tests and get through QA.&lt;/p&gt;
&lt;p&gt;This will be included in Beta Release 4, slated for the end of March, and should be the last version of Optic you have to download from our website until we finish the Beta.&lt;/p&gt;
&lt;h3 id=&quot;optic-markdown-tooling&quot;&gt;&lt;a href=&quot;#optic-markdown-tooling&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optic Markdown Tooling&lt;/h3&gt;
&lt;p&gt;Optic Markdown is pretty simple, but it’s very hard to test and debug. Even we have trouble using it and almost all our Beta Testers have been asking for better tooling. We’re going to make it happen. What would you like to see here? Any ideas for the best way to implement these tools?&lt;/p&gt;
&lt;p&gt;Please let us know by commenting on this post or reaching out to us on &lt;a href=&quot;http://twitter.com/opticdev&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;thanks-so-much-to-all-our-beta-testers-more-to-come&quot;&gt;&lt;a href=&quot;#thanks-so-much-to-all-our-beta-testers-more-to-come&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thanks so much to all our Beta Testers! More to come!&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Starting the Public Beta]]></title><description><![CDATA[Getting ready to launch something big… This highlight of this week was the first public beta release for Optic which came out on the 15th…]]></description><link>https://useoptic.com/blog/starting-the-public-beta</link><guid isPermaLink="false">https://useoptic.com/blog/starting-the-public-beta</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Sun, 18 Mar 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Getting ready to launch something big…&lt;/p&gt;
&lt;p&gt;This highlight of this week was the first public beta release for Optic which came out on the 15th. You can go download it &lt;a href=&quot;http://opticdev.com/get-optic/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This new version of Optic includes the following changes (all built this week):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Released &lt;a href=&quot;https://opticdev.com/docs&quot;&gt;documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added Socket Events to send Project Status for Agents (Used to display loading page and error states)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bumped supported optic-markdown to version 0.1.2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed issue where Optic didn’t work if the App was located in a path with a space in it ie ‘Developer/My Apps’&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packaged Optic Markdown within .jar so it doesn’t need to be installed separately.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optic checks if a valid version of Node is installed before starting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optic Editor window loads faster and has correct title&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bug Fixes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data directories weren’t being created on first run causing most of Optic’s internal functionality to fail. This was missed because in testing we didn’t wipe all Optic files from our test devices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Issue that prevented Optic servers from shutting down after the host Mac App closed has been resolved&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;other-development&quot;&gt;&lt;a href=&quot;#other-development&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Other Development:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Several build scripts written to automate deployments of new Optic binaries&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Built a new page for our website &lt;a href=&quot;http://opticdev.com/get-optic/&quot;&gt;http://opticdev.com/get-optic/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Incorporated basic analytics/crash reporting in Optic (relies on Mixpanel)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hotfix released that fixed an issue several Mac users experienced when their local installation of Node was not in /usr/local/bin/node
&lt;a href=&quot;https://github.com/opticdev/optic/commit/ef0872dc108acc62e0b0878ae707754ea7a4cfcb&quot;&gt;https://github.com/opticdev/optic/commit/ef0872dc108acc62e0b0878ae707754ea7a4cfcb&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HUGE THANKS&lt;/strong&gt; to &lt;a href=&quot;https://twitter.com/scottbarstow&quot;&gt;Scott Barstow&lt;/a&gt;, a beta user who helped virtually debug this issue over 35 emails.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finalized designs for the more advanced transformation system that will appear in the next major version of Optic&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;whats-next&quot;&gt;&lt;a href=&quot;#whats-next&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What’s Next:&lt;/h3&gt;
&lt;p&gt;The next technical priority for Optic is finishing our advanced transformation system. What does that entail?&lt;/p&gt;
&lt;p&gt;Well right now the Optic API can take any Schema &amp;#x26; Lenses and generate code into your project. So a &lt;em&gt;Rest Route&lt;/em&gt; + *Express JS Route *will yield the code for a route definition. This is powerful, but it doesn’t support stringing together Optic knowledge from multiple sources which really handicaps what Optic can do.&lt;/p&gt;
&lt;p&gt;For instance, we should be able to transform a DB Model into a Create Route for that Model. The advanced transformation system will enable a fully functional Route to written with both validation and a query contained within it. These transformations will be generic and allow users to customize the way the code is rendered based on their architecture choices. So the query component in our example above would be rendered using Mongoose, DynamoDB, Sequelize, etc depending on what you’re using for your app.&lt;/p&gt;
&lt;p&gt;tl;dr: Advanced transformations will be able to define generic patterns in code, independent of any particular language or framework. When users call upon these transformations, complex code will be rendered based on the conventions they’ve included in their project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Create Route:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;validation&lt;/li&gt;
&lt;li&gt;An Insert Query:
success -&gt; Response(200, data)
failure -&gt; Response(4xx, error)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;input-wanted&quot;&gt;&lt;a href=&quot;#input-wanted&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Input Wanted:&lt;/h3&gt;
&lt;p&gt;One of the challenges we’re currently facing is figuring out the right updating schedule/mechanism. Since Optic is not a web app we’re a little bit stuck in the past. Our dmgs are ~120MB today and it’s not practical to distribute builds of that size every day. That being said, we also want to move quickly and get great updates out to users ASAP.&lt;/p&gt;
&lt;p&gt;What are some suggestions from the community? Any tools that might help?&lt;/p&gt;
&lt;p&gt;How often would you be willing to update Optic?&lt;/p&gt;
&lt;p&gt;We can patch changes (1–5mb in most cases) in the background without asking you. Is that cool?&lt;/p&gt;
&lt;p&gt;Please respond by commenting on this post or reaching out to us on &lt;a href=&quot;http://twitter.com/opticdev&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;again-thanks-so-much-to-all-our-beta-testers-good-things-are-on-the-horizon&quot;&gt;&lt;a href=&quot;#again-thanks-so-much-to-all-our-beta-testers-good-things-are-on-the-horizon&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Again, thanks so much to all our Beta Testers. Good things are on the horizon.&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[First Release, Open Source & Beta Plans]]></title><description><![CDATA[Optic is going to be an open company with its goals, methods, and failures laid out publicly. It’s been a busy start to 2018 at Optic and we…]]></description><link>https://useoptic.com/blog/first-release-open-source-beta-plans</link><guid isPermaLink="false">https://useoptic.com/blog/first-release-open-source-beta-plans</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Tue, 06 Mar 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Optic is going to be an open company with its goals, methods, and failures laid out publicly. It’s been a busy start to 2018 at Optic and we’re really happy to share with you what we’ve been up to. We’re sorry we haven’t shared more since announcing our product at the start of the year, but I think you’ll agree we’ve gotten a lot done. From now on, you can expect regular updates on our progress here on the blog at least 3 times a month.&lt;/p&gt;
&lt;h3 id=&quot;our-mission&quot;&gt;&lt;a href=&quot;#our-mission&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Our Mission&lt;/h3&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;release-smart-tools-that-help-developers-ship-better-code-faster--spend-their-time-on-the-most-important-problems&quot;&gt;&lt;a href=&quot;#release-smart-tools-that-help-developers-ship-better-code-faster--spend-their-time-on-the-most-important-problems&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Release smart tools that help developers ship better code, faster, &amp;#x26; spend their time on the most important problems.&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;first-release&quot;&gt;&lt;a href=&quot;#first-release&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;First Release&lt;/h3&gt;
&lt;p&gt;First some great news! After several months of hard work we have our first stable release of Optic finished. This build of Optic (0.1.0) is a Beta build and it’s being shared with a few dozen private beta testers. There are two more releases scheduled for March that should be a healthy balance of addressing issues from testing and important new features.&lt;/p&gt;
&lt;p&gt;This version of Optic works on macOS and can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Read Optic Markdown documentation and turn it into code generators and parsers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support Basic Queries/Searching and inline code generation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support Transformation which allow users to generate one one kind of code from another. ie Models -&gt; Routes -&gt; Forms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plug-in to existing IDEs seamlessly. You’ll notice from the video that the interplay between Optic and the host IDE is very fast.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Be launched by double clicking a single .app file&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rather than go on and on we’re just going to show it. Cue the low production value video:&lt;/p&gt;
&lt;div&gt;
          &lt;div
            class=&quot;gatsby-resp-iframe-wrapper&quot;
            style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;&quot;
          &gt;
            &lt;center&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/S5ZzaOof13U&quot; frameborder=&quot;0&quot; allowfullscreen style=&quot;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          &quot;&gt;&lt;/iframe&gt;&lt;/center&gt;
          &lt;/div&gt;
          &lt;/div&gt;
&lt;p&gt;If you want to join the beta email me at aidan@opticdev.com or if you’re interested in using Optic in your company &lt;a href=&quot;https://opticdev.typeform.com/to/CdVPfI&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;open-source&quot;&gt;&lt;a href=&quot;#open-source&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Open Source&lt;/h3&gt;
&lt;p&gt;We believe in open software and we believe that Optic is the kind of tool that needs a strong community behind it. There’s a lot of shared problems companies that build code generators solve and we hope the work we’ve done helps other companies provide more capabilities to users. Principally, the ability to both generate &amp;#x26; read code is something no other tools are capable of and we hope one day soon a new generation of human/AI collaborative tools is built on top of the Optic platform. We can try to imagine what those will look like, but I have a feeling we’re all going to be surprised by what gets built.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/4080/1*pX6w7haCQnlYRySApE8g9Q.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Last week we released our core technologies on GitHub under the MIT license. If you’re interested in learning more about the project or collaborating &lt;a href=&quot;https://calendly.com/acunniffe/30min/03-06-2018&quot;&gt;setup a 30 min call&lt;/a&gt;. There’s a lot of documentation to be written so please bear with us over the next few weeks as we write it.&lt;/p&gt;
&lt;p&gt;Here’s a list of what was released:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/opticdev/optic&quot;&gt;optic&lt;/a&gt;&lt;/strong&gt;: The engine behind Optic’s AI Pair Programming tool. This monorepo includes our SDK, package manager, sourcegear (parser/generator capabilities), and the optic server (which runs in the background and monitors your code)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/opticdev/marvin&quot;&gt;marvin&lt;/a&gt;&lt;/strong&gt;: Marvin learns the structure of programming languages from thousands of examples and builds models trained to generate code from AST Trees.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/opticdev/optic-markdown&quot;&gt;optic-markdown&lt;/a&gt;&lt;/strong&gt;: A spec for human &amp;#x26; machine readable documentation. This is how optic is taught to generate and read certain kinds of code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/opticdev/optic-editor-sdk&quot;&gt;optic-editor-sdk&lt;/a&gt;&lt;/strong&gt;: A javascript library for connecting new IDEs to Optic&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/opticdev/parser-foundation&quot;&gt;parser-foundation&lt;/a&gt;&lt;/strong&gt;: A library &amp;#x26; instructions for adding your favorite programming languages to Optic.&lt;/p&gt;
&lt;h2 id=&quot;beta-plans&quot;&gt;&lt;a href=&quot;#beta-plans&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Beta Plans&lt;/h2&gt;
&lt;p&gt;We will be opening up a public beta before the end of March. During the beta we’ll be operating on a 7–10 day release cycle. If you haven’t signed up on our website &lt;a href=&quot;http://opticdev.com/&quot;&gt;http://opticdev.com/&lt;/a&gt; check it out to make sure you’re notified as soon as public builds of Optic are rolled out.&lt;/p&gt;
&lt;h2 id=&quot;we-look-forward-to-getting-to-know-all-of-you&quot;&gt;&lt;a href=&quot;#we-look-forward-to-getting-to-know-all-of-you&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;We look forward to getting to know all of you.&lt;/h2&gt;
&lt;h2 id=&quot;lets-make-programming-better&quot;&gt;&lt;a href=&quot;#lets-make-programming-better&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Let’s make programming better.&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Next Project]]></title><description><![CDATA[Whenever you go through a big change in your life it’s important to take measure of all the assumptions and biases that influence your…]]></description><link>https://useoptic.com/blog/next-project</link><guid isPermaLink="false">https://useoptic.com/blog/next-project</guid><category><![CDATA[programming]]></category><category><![CDATA[ai]]></category><category><![CDATA[automation]]></category><category><![CDATA[software development]]></category><dc:creator><![CDATA[Optic Team]]></dc:creator><pubDate>Tue, 19 Dec 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Whenever you go through a big change in your life it’s important to take measure of all the assumptions and biases that influence your behavior. So before jumping into anything new I really wanted to achieve a clarity about what I wanted the long arc of my career to look like, who I hoped to be at all times during that journey and what problems I was deeply moved by. When I left my position running Dropsource, I was not sure exactly what I’d be doing next but I had some ideas spanning multiple disciplines. To narrow things down I traveled a lot, spent significant time around coaches, and explored some new industries.&lt;/p&gt;
&lt;p&gt;After Earning many Delta SkyMiles and buying lot of lunches for people, I’ve found what I was looking for.&lt;/p&gt;
&lt;h3 id=&quot;why&quot;&gt;&lt;a href=&quot;#why&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Why&lt;/h3&gt;
&lt;p&gt;I really want to build companies that help creative people build things. You can call them tools I guess, but that’s such a bland description for a very beautiful thing. Empowering &amp;#x26; enabling smart creatives to build things they never could otherwise is a drug I’m addicted to. Sharing in the highs and lows of bringing ideas to life is the most satisfying feeling I’ve yet encountered on this tiny planet.&lt;/p&gt;
&lt;p&gt;With AI getting better and better I think it’s only a matter time before the tools we can deploy to help creatives put Tony Stark’s workshop to shame. I want to make those tools. So my life vision, and the long term vision of all the companies I plan to start over the next few years will be making Picasso’s famous quote &lt;em&gt;“everything you can imagine is real”&lt;/em&gt; literally true.&lt;/p&gt;
&lt;p&gt;As these tools become the norm, I truly believe our economy will &lt;a href=&quot;https://techcrunch.com/2016/04/21/the-automation-revolution-and-the-rise-of-the-creative-economy/&quot;&gt;reform itself around creation/customization and away from raw consumerism&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;introducing-optic&quot;&gt;&lt;a href=&quot;#introducing-optic&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introducing Optic&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/4800/1*XgcxzJzOQ3cGa1braFjMgQ.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;inspiration&quot;&gt;&lt;a href=&quot;#inspiration&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Inspiration&lt;/h3&gt;
&lt;p&gt;While reflecting on the three years I spent building Dropsource from dorm room to established brand it become clear that non-programmers were the main buyers for our no-code development platform. The shortcomings that kept us from satisfying programmers are consistent with the decades long history of visual tools and came as no surprise. What was interesting however was just how much the programmers liked specific parts of our platform in isolation. Things like automatically mapping their APIs to native code, binding fields to data, and a lot of other boilerplate/repetitive work we automated were really compelling time savers.&lt;/p&gt;
&lt;p&gt;What I began to notice this year while doing diligence on other no/low code tools and talking to many of my peers who have built and run dev tool companies is that that there’s a huge huge opportunity to bring useful automation to the developer. The problem to be solved is in the delivery method. Today these low-code/no-code tools require you to go “all the way”. You have to give up your control, your favorite tools, and shelf the knowledge you already have to embrace some new and often unpolished paradigms.&lt;/p&gt;
&lt;p&gt;There seemed like there had to be a way to bring very useful automation to developers in their current workflows and searching for ways to do this led us to the following design questions:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What if there were a way to have programmers and computers collaborate on the same codebase without getting in each other’s way? À la carte automation when you want it, normal programming when you don’t…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What if there you could import conventions and best practices the same way you import code?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What if you could ask documentation questions and they could answer by writing the correct code for you?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;And what if all of this could be achieved without changing your tools, programming environment or existing code?&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;our-mission&quot;&gt;&lt;a href=&quot;#our-mission&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Our Mission&lt;/h3&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;organize-the-worlds-programming-knowledge-and-make-it-accessible-through-automation&quot;&gt;&lt;a href=&quot;#organize-the-worlds-programming-knowledge-and-make-it-accessible-through-automation&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Organize the world’s programming knowledge and make it accessible through automation&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;p&gt;Programming knowledge is diffused in a variety of places. There are tutorials, that example your co-worker emailed you, videos, wikis, Q&amp;#x26;A sites, docs pages and troves of raw source code sitting on Github. The landscape in many ways resembles the internet as a whole before Google. This abundance of resources is great; however, it takes a human to find, interpret and act on this information and human time is scarce and expensive.&lt;/p&gt;
&lt;p&gt;We believe that making this knowledge accessible with automation can save millions of hours a year and give developers and teams the confidence they are following the best practices in every situation.&lt;/p&gt;
&lt;p&gt;To achieve this mission we have had to develop a toolchain for turning existing documentation into knowledge a machine can use to assist programmers. In addition to that already difficult task, we’ve had to create technologies that allow computers to read/write code alongside a human programmer without mucking up the codebase or overwriting manual changes. All of this work will be open sourced over the next few weeks and we hope that other groups with similar missions benefit from this soon-to-be prior work.&lt;/p&gt;
&lt;h2 id=&quot;optic-agent--opticdevcom&quot;&gt;&lt;a href=&quot;#optic-agent--opticdevcom&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Optic Agent — &lt;a href=&quot;http://opticdev.com&quot;&gt;opticdev.com&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We built the Optic Agent to help programmers automate work, share knowledge and enforce conventions. Once installed, the Agent will monitor your code and function as your personal programming assistant.&lt;/p&gt;
&lt;p&gt;We believe you should not have to change all of your tools or abandon your battle hardened workflow to benefit from a little automation. With that in mind, our key design focus while developing the agent was to make it discreet and impartial. As such it can tap into any IDE and be made to work with any programming language.&lt;/p&gt;
&lt;p&gt;The Agent can make use of your team’s knowledge or you can import knowledge from individual developers and companies you trust. Once configured, this knowledge can be used by the Agent in several ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Perform searches — just start typing questions in your editor and Optic will pull up results from its knowledge-base. Once a result is selected and configured code gets generated into your project. ie “Process Credit Card”, “Send Text Message” or “Issue JWT Token”. We’re working with NLP experts to push the limits on what you can ask Optic to generate. Supporting compound questions like “Create a route that lists all of a user’s friends” is a stretch goal and one we’ll be able to move towards as our ecosystem grows richer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make Suggestions — since the Agent knows a lot more about your code and how different pieces may fit together than any other IDE, it can suggest the next things you might want to do based on your context. For instance if you have a Mongoose Model selected, Optic will ask if you want it to generate CRUD routes &amp;#x26; queries for that model and help your configure them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connect Code — A major headache for programmers is keeping their code synchronized across projects and teams. A simple example would be keeping your models synced between your server and client code. Optic can store implicit connections between different parts of your code (even across repos) and keep everything consistent with whatever you define as the ground truth.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enforce Conventions — Have a structure you want your team to follow when writing code? You can use Optic to help teams follow conventions and do things the way they should. This can speed up development time, decrease frustration and increase the quality of every line that gets committed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unlike other code generators Optic does not break if you change something it generates. We actually encourage you to make changes by hand whenever you need to and have designed the tool to work with them gracefully. Without getting too technical this works because there is no hidden information in an Optic Project; the code itself is always the ground truth. Change it as you see fit. Collaboration with a code generator should not be a one way street.&lt;/p&gt;
&lt;p&gt;We’ll be releasing videos over the next few weeks leading up to release showcasing the Agent and how our early users are making use of it. To learn more head over to our &lt;a href=&quot;http://opticdev.com&quot;&gt;landing page and sign up&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;open-source&quot;&gt;&lt;a href=&quot;#open-source&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Open Source&lt;/h3&gt;
&lt;p&gt;The future of programming, whatever it may be, should be open. If you are serious about changing programming, and we are, it has to be done out in the open. So we’re developing Optic’s core technologies out in the open. If you have a use for it and intend to make programming better for million of developers, please fork our work and contribute useful things back. You can read more about what we’re releasing in the coming weeks in a more technical &lt;a href=&quot;http://opticdev.com/blog/about-optic/&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;the-business&quot;&gt;&lt;a href=&quot;#the-business&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;The Business&lt;/h3&gt;
&lt;p&gt;There’s a readily available business model for Optic that aligns itself well with the incentives of our users. A team of programmers of any size will have a lot of proprietary knowledge. While Optic will always be free and open, there are all kinds of premium tooling we can offer to these teams of developers to store/manage their internal knowledge, enforce standards and automate different parts of their workflows. There’s also a substantial opportunity to add value with professional services to companies that want to codify their standards and deploy Optic throughout their organization or amongst their customers.&lt;/p&gt;
&lt;p&gt;Today we’re laser focused on just delivering value to our first hundred users at no cost. We will literally be sitting next to people helping them deploy Optic to automate the parts of their process that need it most. Once we’ve worked out the kinks and our community has created enough knowledge to solve a wide range of problems, there’s no doubt there’s a very substantial business to built in this space.&lt;/p&gt;
&lt;h3 id=&quot;rollout&quot;&gt;&lt;a href=&quot;#rollout&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rollout&lt;/h3&gt;
&lt;p&gt;We will be releasing our open source work incrementally over the next few weeks. During that time the first users will get access to Optic and soon after it will be released publicly.&lt;/p&gt;
&lt;p&gt;Once its out we’re going on tour to cities all over the country to give talks, meet users, get hands on experience, and most importantly** solve real problems**.&lt;/p&gt;
&lt;p&gt;If you want to get updates throughout this process visit our &lt;a href=&quot;http://opticdev.com&quot;&gt;landing page and sign up&lt;/a&gt; for our email list. You can also follow us here on &lt;a href=&quot;https://medium.com/optic-blog&quot;&gt;Medium&lt;/a&gt;, on &lt;a href=&quot;https://twitter.com/&quot;&gt;Twitter&lt;/a&gt; and on &lt;a href=&quot;https://github.com/opticdev&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We’re really excited to get Optic out there! If you want to get early access and/or have a conversation with us about Optic please feel free to reach out directly.&lt;/p&gt;
&lt;p&gt;To everyone who’s made it this far, thanks so much for taking the time to learn about Optic. We hope you enjoy the holiday season and the rest of your year. We’ll see you in 2018!&lt;/p&gt;
&lt;h3 id=&quot;special-thanks&quot;&gt;&lt;a href=&quot;#special-thanks&quot; aria-hidden=&quot;true&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Special Thanks&lt;/h3&gt;
&lt;p&gt;Finally, I want to extend a special thanks to the following people who have been really influential advisors throughout the development of Optic.&lt;/p&gt;
&lt;p&gt;First callout goes to David Weiss, an incredible designer who helped me think through what a UX that worked with existing IDEs would look like. More importantly David helped me adopt a more disciplined approach to design which will no doubt influence my work for years.&lt;/p&gt;
&lt;p&gt;Then there’s Robbie Allen the founder of Automated Insights who has been an incredible advisor over the last year. Robbie has helped me flex quite a few mental muscles as I’ve designed this product, has held me accountable for consistent progress, and has been a great role model as an entrepreneur and solo founder.&lt;/p&gt;
&lt;p&gt;I also want to thank Igor Jablokov, an amazing founder who sold what become Alexa to Amazon and now runs his new venture Pryon. Igor is one of the smartest people I’ve ever known and has supported me in countless ways as I figured out what was next and started building it. In the early days Igor would counsel me 4–5 times a month at his house and a lot of his wisdom from those chats has made it into our strategy.&lt;/p&gt;
&lt;p&gt;Another callout has to go to Chipp Walters, an incredible designer who has been following and involved with dev tools for years. Chipp, more than anyone I’ve ever met, can think in terms of design and computer science at the same time and has been an amazing resource.&lt;/p&gt;
&lt;p&gt;My friend Sean Maroni who still leaves me awestruck after most of our conversations. Sean spoke with me about this concept for hours during the earliest days and helped me frame the problems in a really productive/actionable way.&lt;/p&gt;
&lt;p&gt;Finally longest reigning mentor on Iron Throne of Aidanland — Mr. Bill Spruill. Thank you for helping me transition out, dusting me off, filling my head with good thoughts, and pushing me into the ring for Round 2.&lt;/p&gt;</content:encoded></item></channel></rss>