{"version":3,"sources":["webpack:///path---lenses-eafe871f3920eb4e7b1c.js","webpack:///./.cache/json/lenses.json"],"names":["webpackJsonp","434","module","exports","data","postBySlug","html","timeToRead","excerpt","frontmatter","title","cover","date","category","tags","tableOfContents","chapters","entries","entry","id","childMarkdownRemark","fields","slug","type","tableOfContentsSkills","headings","value","depth","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SACAC,MACAC,YACAC,KAAA,81iBACAC,WAAA,EACAC,QAAA,gJACAC,aACAC,MAAA,SACAC,MAAA,KACAC,KAAA,KACAC,SAAA,KACAC,KAAA,OAGAC,iBACAC,WAEAN,MAAA,iBACAO,UAEAC,OACAC,GAAA,sHACAC,qBACAC,QACAC,KAAA,2BAEAb,aACAC,MAAA,0BACAa,KAAA,UAMAL,OACAC,GAAA,kHACAC,qBACAC,QACAC,KAAA,uBAEAb,aACAC,MAAA,qBACAa,KAAA,UAMAL,OACAC,GAAA,wGACAC,qBACAC,QACAC,KAAA,oBAEAb,aACAC,MAAA,mBACAa,KAAA,UAMAL,OACAC,GAAA,wGACAC,qBACAC,QACAC,KAAA,mBAEAb,aACAC,MAAA,iBACAa,KAAA,YAQAb,MAAA,cACAO,UAEAC,OACAC,GAAA,mGACAC,qBACAC,QACAC,KAAA,sBAEAb,aACAC,MAAA,oBACAa,KAAA,UAMAL,OACAC,GAAA,gGACAC,qBACAC,QACAC,KAAA,aAEAb,aACAC,MAAA,WACAa,KAAA,UAMAL,OACAC,GAAA,kGACAC,qBACAC,QACAC,KAAA,eAEAb,aACAC,MAAA,aACAa,KAAA,UAMAL,OACAC,GAAA,8FACAC,qBACAC,QACAC,KAAA,WAEAb,aACAC,MAAA,SACAa,KAAA,UAMAL,OACAC,GAAA,iGACAC,qBACAC,QACAC,KAAA,cAEAb,aACAC,MAAA,YACAa,KAAA,UAMAL,OACAC,GAAA,4FACAC,qBACAC,QACAC,KAAA,SAEAb,aACAC,MAAA,OACAa,KAAA,YAQAb,MAAA,sBACAO,UAEAC,OACAC,GAAA,uGACAC,qBACAC,QACAC,KAAA,0BAEAb,aACAC,MAAA,wBACAa,KAAA,UAMAL,OACAC,GAAA,8GACAC,qBACAC,QACAC,KAAA,uBAEAb,aACAC,MAAA,qBACAa,KAAA,UAMAL,OACAC,GAAA,mGACAC,qBACAC,QACAC,KAAA,YAEAb,aACAC,MAAA,UACAa,KAAA,UAMAL,OACAC,GAAA,kGACAC,qBACAC,QACAC,KAAA,WAEAb,aACAC,MAAA,SACAa,KAAA,UAMAL,OACAC,GAAA,2GACAC,qBACAC,QACAC,KAAA,oBAEAb,aACAC,MAAA,kBACAa,KAAA,UAMAL,OACAC,GAAA,sGACAC,qBACAC,QACAC,KAAA,eAEAb,aACAC,MAAA,aACAa,KAAA,aASAC,uBACAR,WAEAN,MAAA,iEACAO,UAEAC,OACAC,GAAA,mGACAC,qBACAK,WAEAC,MAAA,iEACAC,MAAA,IAGAD,MAAA,eACAC,MAAA,IAGAD,MAAA,mBACAC,MAAA,IAGAD,MAAA,sBACAC,MAAA,IAGAD,MAAA,oDACAC,MAAA,IAGAD,MAAA,8BACAC,MAAA,IAGAD,MAAA,gCACAC,MAAA,IAGAD,MAAA,gBACAC,MAAA,IAGAN,QACAC,KAAA,oEAEAb,aACAC,MAAA,iEACAa,KAAA,iBAUAK,aACAN,KAAA,UACAC,KAAA","file":"path---lenses-eafe871f3920eb4e7b1c.js","sourcesContent":["webpackJsonp([90369145381862],{\n\n/***/ 434:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"data\": {\n\t\t\t\"postBySlug\": {\n\t\t\t\t\"html\": \"<h1 id=\\\"defining-lenses\\\"><a href=\\\"#defining-lenses\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Defining Lenses</h1>\\n<p>Defining a Lens in Optic Markdown is like showing your friend a snippet of code and pointing out all the parts they can edit. You do not need to write any code or have prior knowledge of AST trees to write a Lens. It will take your description from markdown and compile it into the code it needs to walk the AST Tree and extract values. Lenses serve as loose matchers for code and will match any code that is structurally similar regardless of formatting.</p>\\n<blockquote>\\n<p>Match and Extract <br> <br>\\nOptic matches code and extracts values from that code, similar to how a regex works. When a Lens is compiled, it is turned into a node description that is analogous to a regex pattern. This description is compared to new instances from left -> right and will stop traversing the AST Tree as soon as a node is found that does not match the rules in the description.</p>\\n</blockquote>\\n<blockquote>\\n<p>As a node is matching, values specified in the Lens are extracted and added to a result object.</p>\\n</blockquote>\\n<blockquote>\\n<p>If a node in your code meets the description and the extracted values constitute a valID Schema of the type defined by the Lens, then a match is found.</p>\\n</blockquote>\\n<p>Each Lens starts with a code snippet that can be added to markdown using the code block syntax.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">```Javascript\\nimport definedAs from ‘pathTo’\\n```</code></pre>\\n      </div>\\n<p>From there we add a Lens annotation above the snippet:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token comment\\\">&lt;!-- Lens-def\\nname=“Import Statement”\\nSchema=“import”\\nlanguage=“es7”\\n--></span>\\n```Javascript\\nimport definedAs from ‘pathTo’\\n```</code></pre>\\n      </div>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Usage</th>\\n<th align=\\\"center\\\">Required</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name string</td>\\n<td>the name of this Lens. Pick something descriptive like “Express Route”, “Signup Form” or “Insert Query”</td>\\n<td align=\\\"center\\\">yes</td>\\n</tr>\\n<tr>\\n<td>Schema</td>\\n<td>the ID of the Schema this Lens implements. If the Schema is defined in this markdown, use just its name. If it is from another package, use \\n<code class=\\\"language-text\\\">author:packageName@version/name</code></td>\\n<td align=\\\"center\\\">yes</td>\\n</tr>\\n<tr>\\n<td>language</td>\\n<td>the name of the parser needed to read this code.</td>\\n<td align=\\\"center\\\">yes</td>\\n</tr>\\n<tr>\\n<td>ID</td>\\n<td>an ID used to reference this Lens</td>\\n<td align=\\\"center\\\">yes</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"finders\\\"><a href=\\\"#finders\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Finders</h2>\\n<p>Finders are used to extract/set values in the snippet. A finder is resolved to a node within the AST tree and its corresponding path during the compile phase. When Optic reads your code it will map the value of certain AST Nodes to your model. When changes to the model are processed, Optic uses those AST Mappings to update the source code.</p>\\n<p>Finders are structured like this:\\n<code class=\\\"language-text\\\">’string finder’ =&gt; path.to.field</code></p>\\n<h3 id=\\\"string-finder\\\"><a href=\\\"#string-finder\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>String Finder</h3>\\n<p>A String Finder is used to search the AST Tree for a specific string. There are several modifiers you can add to the string finder to customize its behavior:</p>\\n<ol>\\n<li><code class=\\\"language-text\\\">’string’.entire</code> - (default when no other is specified) will match a node with raw contents that equal the search string.</li>\\n<li><code class=\\\"language-text\\\">’string’.containing</code> - will match a node with raw contents that contain the search string.</li>\\n<li><code class=\\\"language-text\\\">’string’.starting</code> - will match a node with raw contents that start with the search string.</li>\\n</ol>\\n<p>If your string finder matches multiple sections of your example code, you can specify exactly which instance you want to match by adding a position selector at the end of your string finer:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">‘string’.starting[1]\\n‘string’[3]</code></pre>\\n      </div>\\n<h3 id=\\\"property-paths-and-validation\\\"><a href=\\\"#property-paths-and-validation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Property Paths and ValIDation</h3>\\n<p>Values extracted with finders are used to build a model that conforms to the Lens’s Schema. Paths are set using a series of keys separated by periods.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">property.path\\notherProperty.values.path</code></pre>\\n      </div>\\n<p>Bringing it all together, if you wanted to describe the finders for the this import statement you would write the following:</p>\\n<p>This is the Schema we are mapping values onto</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n\\t“title”<span class=\\\"token operator\\\">:</span> “Import”\\n\\t“type”<span class=\\\"token operator\\\">:</span> “object”<span class=\\\"token punctuation\\\">,</span>\\n\\t“properties”<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t“definedAs”<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>‘type’<span class=\\\"token operator\\\">:</span> ‘string’<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t“pathTo”<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>‘type’<span class=\\\"token operator\\\">:</span> ‘string’<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>We would need two finders</p>\\n<p><code class=\\\"language-text\\\">’definedAs’ =&gt; definedAs</code></p>\\n<p><code class=\\\"language-text\\\">’pathTo’.containing =&gt; pathTo</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token comment\\\">&lt;!-- Lens-def\\nname=“Import Statement”\\nSchema=“import”\\nlanguage=“es7”\\n‘definedAs’ => definedAs\\n‘pathTo’.containing => pathTo\\n--></span>\\n```Javascript\\nimport definedAs from ‘pathTo’\\n```</code></pre>\\n      </div>\\n<p>Once compiled this Lens produces the following models for each line of code:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">import hello from ‘world’ //{definedAs: ‘hello’, pathTo: ‘world’}\\nimport IDentifier from ‘path/to/value’ //{definedAs: ‘IDentifier’, pathTo: ‘path/to/value’}</code></pre>\\n      </div>\\n<h2 id=\\\"mapping-schemas\\\"><a href=\\\"#mapping-schemas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mapping Schemas</h2>\\n<p>Sometimes you need to collect Schemas from a section of code and turn them into an array. For instance, if you have a route, you might want to get all the parameters insIDe that route. This is done using <code class=\\\"language-text\\\">map</code> and <code class=\\\"language-text\\\">mapUnique</code> methods. Both <code class=\\\"language-text\\\">map</code> and <code class=\\\"language-text\\\">mapUnique</code> take a Schema reference as their sole parameter. This tells Optic to find the values of all the matching Schemas and assign that array to a property path.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">app.get(‘/url’, function (req, res) {\\n\\tconst ID = req.query.ID\\n\\tconst lang = req.query.lang\\n\\t...\\n})</code></pre>\\n      </div>\\n<ul>\\n<li>\\n<p><strong>map(‘SchemaID’)</strong> - collects all instances of the Schemas found within the parent AST Node <code class=\\\"language-text\\\">[a,b,b,c,b,d]</code></p>\\n</li>\\n<li>\\n<p><strong>mapUnique(‘SchemaID’)</strong> - collects all distinct instances of the Schema found within the parent AST Node <code class=\\\"language-text\\\">[a,b,b,c,b,d] -&gt; [a,b,c,d]</code></p>\\n</li>\\n<li>\\n<p><strong>mapToObject(‘SchemaID’, ‘keyField’)</strong> - collects all instances of the Schema found within the parent AST Node and then uses the field you pass in as the key. The last item found will win out if keys are duplicates. <code class=\\\"language-text\\\">[a, b,c] -&gt; {[a.key]: a, [b.key]: b, [c.key]: c}</code></p>\\n</li>\\n</ul>\\n<p><strong>Usage:</strong></p>\\n<p><code class=\\\"language-text\\\">mapUnique(‘optic:rest/parameter’) =&gt; parameters</code></p>\\n<p>would yield...</p>\\n<p>parameters: <code class=\\\"language-text\\\">[{in: ‘query’, name: ‘ID’}, {in: ‘query’, name: ‘lang’}]</code></p>\\n<blockquote>\\n<p>If you only want to map Schemas from a specific part of your Lens, you can put the map methods insIDe a container.</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token comment\\\">&lt;!-- Lens-def\\nname=“Route”\\nlanguage=“es7”\\nSchema=“optic:rest/route”\\n“url”.containing => url\\n“get” => method\\nmapUnique(‘optic:rest/parameter’) => parameters\\n--></span>\\n```Javascript\\napp.get(‘url’, function (req, res) {\\n\\n})\\n```</code></pre>\\n      </div>\\n<h2 id=\\\"containers\\\"><a href=\\\"#containers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Containers</h2>\\n<p>Containers can be used to label callbacks or other blocks of code and set rules about what kind of code can go insIDe of them.</p>\\n<p>A container is defined in the example snippet by adding an inline comment with the following format <code class=\\\"language-text\\\">//:{container name}</code></p>\\n<p>The settings for each container are set by adding a new block to your annotation</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">“{container name}” = (\\n  // container settings go here\\n)</code></pre>\\n      </div>\\n<p>A container block supports several kinds of entires:</p>\\n<ul>\\n<li><a href=\\\"#mapping-schemas\\\">Map Schema</a> entires. If set in a container block, only Schemas found within the container will be included in the output array.</li>\\n<li><a href=\\\"#variables\\\">Variable</a> declarations, scoped to this container and its children</li>\\n<li>Children match rule (default any), determines if Optic will match the container/its parent based on the contents of this container.</li>\\n</ul>\\n<table>\\n<thead>\\n<tr>\\n<th>name</th>\\n<th>matches when</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>any</td>\\n<td>always</td>\\n</tr>\\n<tr>\\n<td>same-plus</td>\\n<td>children from example snippet are present, in the order they appear in the example, plus any other children.  \\n<br>\\n example snippet = \\n[\\nA, B, C\\n]\\n \\n<br>\\n \\n[\\nB, C\\n]\\n false \\n<br>\\n \\n[\\nA, D, B, C\\n]\\n true \\n<br>\\n \\n[\\nA, B, C\\n]\\n true \\n<br>\\n \\n[\\nA, B, C, D\\n]\\n true</td>\\n</tr>\\n<tr>\\n<td>same-plus-any-order</td>\\n<td>children from the example snippet are present, in any order, plus any other children \\n<br>\\n example snippet = \\n[\\nA, B, C\\n]\\n \\n<br>\\n \\n[\\nC, B, D, E, A\\n]\\n true \\n<br>\\n \\n[\\nA, B, C\\n]\\n true \\n<br>\\n \\n[\\nC, B, D, E\\n]\\n false</td>\\n</tr>\\n<tr>\\n<td>exact</td>\\n<td>children match those in the example snippet</td>\\n</tr>\\n</tbody>\\n</table>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token comment\\\">&lt;!-- Lens-def\\nname=“Route”\\nlanguage=“es7”\\nSchema=“optic:rest/route”\\n“url”.containing => url\\n“get” => method\\n“callback” = (\\n  mapUnique(‘optic:rest/parameter’) &lt;=> parameters\\n  any\\n)\\n--></span>\\n```Javascript\\napp.get(‘url’, function (req, res) {\\n  //:callback\\n})\\n```</code></pre>\\n      </div>\\n<h2 id=\\\"variables\\\"><a href=\\\"#variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variables</h2>\\n<p>Variables are a key part of Optic’s loose matching. When you define a variable in your Lens, it tells Optic that a token can have any value, as long as it is consistent throughout the code block.</p>\\n<p>For instance without a variable defined, all 3 instances of “result” must equal “result” for Optic to match this section of code.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">function test(result) {\\n\\tmessage.post(result)\\n\\tsystem.process(result)\\n}</code></pre>\\n      </div>\\n<p>If you define a variable for ‘result’ the following code will also be matched,</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">function test(otherToken) {\\n\\tmessage.post(otherToken)\\n\\tsystem.process(otherToken)\\n}</code></pre>\\n      </div>\\n<p>But this code would not be</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">function test(otherToken) {\\n\\tmessage.post(otherToken)\\n\\tsystem.process(result)\\n}</code></pre>\\n      </div>\\n<p>Variables are defined by typing the token name in quotes and then adding an asterisks.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">“variable”*</code></pre>\\n      </div>\\n<h2 id=\\\"initial-values\\\"><a href=\\\"#initial-values\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Initial Values</h2>\\n<p>If you want to set an initial value for your Lens you can set an optional field called <code class=\\\"language-text\\\">initial</code>. If you set it equal to a JSON string, that JSON becomes the initial value of each instance that gets parsed. This is useful when you have Lenses that act like enums or Lenses that don’t extract all their required values from the code. </p>\\n<blockquote>\\n<p>Note: The requirement of the JSON being a string rather than normal object notation will be relaxed in a future release. </p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">initial=‘{“code”: 200}’</code></pre>\\n      </div>\",\n\t\t\t\t\"timeToRead\": 7,\n\t\t\t\t\"excerpt\": \"Defining Lenses Defining a Lens in Optic Markdown is like showing your friend a snippet of code and pointing out all the parts they can edit…\",\n\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\"title\": \"Lenses\",\n\t\t\t\t\t\"cover\": null,\n\t\t\t\t\t\"date\": null,\n\t\t\t\t\t\"category\": null,\n\t\t\t\t\t\"tags\": null\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"tableOfContents\": {\n\t\t\t\t\"chapters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"title\": \"What is Optic?\",\n\t\t\t\t\t\t\"entries\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/another-code-generator.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/another-code-generator\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Another Code Generator?\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/technical-overview.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/technical-overview\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Technical Overview\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/ontology.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/optics-ontology\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Optic's Ontology\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/markdown.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/optic-markdown\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Optic Markdown\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"title\": \"Using Optic\",\n\t\t\t\t\t\t\"entries\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/get-started.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/using-get-started\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Using Get Started\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/workflow.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/workflow\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Workflow\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/properties.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/properties\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Properties\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/search.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/search\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Search\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/transform.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/transform\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Transform\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/sync.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/sync\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Sync\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"title\": \"Authoring Knowledge\",\n\t\t\t\t\t\t\"entries\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/get-started.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/authoring-get-started\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Authoring Get Started\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/knowledge-packages.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/knowledge-packages\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Knowledge Packages\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/schemas.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/schemas\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Schemas\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/lenses.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/lenses\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Lenses\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/transformations.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/transformations\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Transformations\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/publishing.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/publishing\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Publishing\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"tableOfContentsSkills\": {\n\t\t\t\t\"chapters\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"title\": \"Generate RequestJS calls for every route in an Express backend\",\n\t\t\t\t\t\t\"entries\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/skills/generate-requestjs.md absPath of file\",\n\t\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\t\"headings\": [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Generate RequestJS calls for every route in an Express backend\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"depth\": 1\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Requirements\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Including Skills\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Our First Transform\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Generating Networking Calls from your Client Code\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Name and Source Annotations\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"depth\": 3\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Syncing API & Networking Code\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Going Further\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\t\"slug\": \"/generate-request-js-calls-for-every-route-in-an-express-backend\"\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\t\"title\": \"Generate RequestJS calls for every route in an Express backend\",\n\t\t\t\t\t\t\t\t\t\t\t\"type\": \"skill\"\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"pathContext\": {\n\t\t\t\"slug\": \"/lenses\",\n\t\t\t\"type\": null\n\t\t}\n\t};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---lenses-eafe871f3920eb4e7b1c.js","module.exports = {\n\t\"data\": {\n\t\t\"postBySlug\": {\n\t\t\t\"html\": \"<h1 id=\\\"defining-lenses\\\"><a href=\\\"#defining-lenses\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Defining Lenses</h1>\\n<p>Defining a Lens in Optic Markdown is like showing your friend a snippet of code and pointing out all the parts they can edit. You do not need to write any code or have prior knowledge of AST trees to write a Lens. It will take your description from markdown and compile it into the code it needs to walk the AST Tree and extract values. Lenses serve as loose matchers for code and will match any code that is structurally similar regardless of formatting.</p>\\n<blockquote>\\n<p>Match and Extract <br> <br>\\nOptic matches code and extracts values from that code, similar to how a regex works. When a Lens is compiled, it is turned into a node description that is analogous to a regex pattern. This description is compared to new instances from left -> right and will stop traversing the AST Tree as soon as a node is found that does not match the rules in the description.</p>\\n</blockquote>\\n<blockquote>\\n<p>As a node is matching, values specified in the Lens are extracted and added to a result object.</p>\\n</blockquote>\\n<blockquote>\\n<p>If a node in your code meets the description and the extracted values constitute a valID Schema of the type defined by the Lens, then a match is found.</p>\\n</blockquote>\\n<p>Each Lens starts with a code snippet that can be added to markdown using the code block syntax.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">```Javascript\\nimport definedAs from ‘pathTo’\\n```</code></pre>\\n      </div>\\n<p>From there we add a Lens annotation above the snippet:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token comment\\\">&lt;!-- Lens-def\\nname=“Import Statement”\\nSchema=“import”\\nlanguage=“es7”\\n--></span>\\n```Javascript\\nimport definedAs from ‘pathTo’\\n```</code></pre>\\n      </div>\\n<table>\\n<thead>\\n<tr>\\n<th>Field</th>\\n<th>Usage</th>\\n<th align=\\\"center\\\">Required</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>name string</td>\\n<td>the name of this Lens. Pick something descriptive like “Express Route”, “Signup Form” or “Insert Query”</td>\\n<td align=\\\"center\\\">yes</td>\\n</tr>\\n<tr>\\n<td>Schema</td>\\n<td>the ID of the Schema this Lens implements. If the Schema is defined in this markdown, use just its name. If it is from another package, use \\n<code class=\\\"language-text\\\">author:packageName@version/name</code></td>\\n<td align=\\\"center\\\">yes</td>\\n</tr>\\n<tr>\\n<td>language</td>\\n<td>the name of the parser needed to read this code.</td>\\n<td align=\\\"center\\\">yes</td>\\n</tr>\\n<tr>\\n<td>ID</td>\\n<td>an ID used to reference this Lens</td>\\n<td align=\\\"center\\\">yes</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2 id=\\\"finders\\\"><a href=\\\"#finders\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Finders</h2>\\n<p>Finders are used to extract/set values in the snippet. A finder is resolved to a node within the AST tree and its corresponding path during the compile phase. When Optic reads your code it will map the value of certain AST Nodes to your model. When changes to the model are processed, Optic uses those AST Mappings to update the source code.</p>\\n<p>Finders are structured like this:\\n<code class=\\\"language-text\\\">’string finder’ =&gt; path.to.field</code></p>\\n<h3 id=\\\"string-finder\\\"><a href=\\\"#string-finder\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>String Finder</h3>\\n<p>A String Finder is used to search the AST Tree for a specific string. There are several modifiers you can add to the string finder to customize its behavior:</p>\\n<ol>\\n<li><code class=\\\"language-text\\\">’string’.entire</code> - (default when no other is specified) will match a node with raw contents that equal the search string.</li>\\n<li><code class=\\\"language-text\\\">’string’.containing</code> - will match a node with raw contents that contain the search string.</li>\\n<li><code class=\\\"language-text\\\">’string’.starting</code> - will match a node with raw contents that start with the search string.</li>\\n</ol>\\n<p>If your string finder matches multiple sections of your example code, you can specify exactly which instance you want to match by adding a position selector at the end of your string finer:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">‘string’.starting[1]\\n‘string’[3]</code></pre>\\n      </div>\\n<h3 id=\\\"property-paths-and-validation\\\"><a href=\\\"#property-paths-and-validation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Property Paths and ValIDation</h3>\\n<p>Values extracted with finders are used to build a model that conforms to the Lens’s Schema. Paths are set using a series of keys separated by periods.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">property.path\\notherProperty.values.path</code></pre>\\n      </div>\\n<p>Bringing it all together, if you wanted to describe the finders for the this import statement you would write the following:</p>\\n<p>This is the Schema we are mapping values onto</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n\\t“title”<span class=\\\"token operator\\\">:</span> “Import”\\n\\t“type”<span class=\\\"token operator\\\">:</span> “object”<span class=\\\"token punctuation\\\">,</span>\\n\\t“properties”<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n\\t\\t“definedAs”<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>‘type’<span class=\\\"token operator\\\">:</span> ‘string’<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t\\t“pathTo”<span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>‘type’<span class=\\\"token operator\\\">:</span> ‘string’<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\t<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>We would need two finders</p>\\n<p><code class=\\\"language-text\\\">’definedAs’ =&gt; definedAs</code></p>\\n<p><code class=\\\"language-text\\\">’pathTo’.containing =&gt; pathTo</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token comment\\\">&lt;!-- Lens-def\\nname=“Import Statement”\\nSchema=“import”\\nlanguage=“es7”\\n‘definedAs’ => definedAs\\n‘pathTo’.containing => pathTo\\n--></span>\\n```Javascript\\nimport definedAs from ‘pathTo’\\n```</code></pre>\\n      </div>\\n<p>Once compiled this Lens produces the following models for each line of code:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">import hello from ‘world’ //{definedAs: ‘hello’, pathTo: ‘world’}\\nimport IDentifier from ‘path/to/value’ //{definedAs: ‘IDentifier’, pathTo: ‘path/to/value’}</code></pre>\\n      </div>\\n<h2 id=\\\"mapping-schemas\\\"><a href=\\\"#mapping-schemas\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Mapping Schemas</h2>\\n<p>Sometimes you need to collect Schemas from a section of code and turn them into an array. For instance, if you have a route, you might want to get all the parameters insIDe that route. This is done using <code class=\\\"language-text\\\">map</code> and <code class=\\\"language-text\\\">mapUnique</code> methods. Both <code class=\\\"language-text\\\">map</code> and <code class=\\\"language-text\\\">mapUnique</code> take a Schema reference as their sole parameter. This tells Optic to find the values of all the matching Schemas and assign that array to a property path.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">app.get(‘/url’, function (req, res) {\\n\\tconst ID = req.query.ID\\n\\tconst lang = req.query.lang\\n\\t...\\n})</code></pre>\\n      </div>\\n<ul>\\n<li>\\n<p><strong>map(‘SchemaID’)</strong> - collects all instances of the Schemas found within the parent AST Node <code class=\\\"language-text\\\">[a,b,b,c,b,d]</code></p>\\n</li>\\n<li>\\n<p><strong>mapUnique(‘SchemaID’)</strong> - collects all distinct instances of the Schema found within the parent AST Node <code class=\\\"language-text\\\">[a,b,b,c,b,d] -&gt; [a,b,c,d]</code></p>\\n</li>\\n<li>\\n<p><strong>mapToObject(‘SchemaID’, ‘keyField’)</strong> - collects all instances of the Schema found within the parent AST Node and then uses the field you pass in as the key. The last item found will win out if keys are duplicates. <code class=\\\"language-text\\\">[a, b,c] -&gt; {[a.key]: a, [b.key]: b, [c.key]: c}</code></p>\\n</li>\\n</ul>\\n<p><strong>Usage:</strong></p>\\n<p><code class=\\\"language-text\\\">mapUnique(‘optic:rest/parameter’) =&gt; parameters</code></p>\\n<p>would yield...</p>\\n<p>parameters: <code class=\\\"language-text\\\">[{in: ‘query’, name: ‘ID’}, {in: ‘query’, name: ‘lang’}]</code></p>\\n<blockquote>\\n<p>If you only want to map Schemas from a specific part of your Lens, you can put the map methods insIDe a container.</p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token comment\\\">&lt;!-- Lens-def\\nname=“Route”\\nlanguage=“es7”\\nSchema=“optic:rest/route”\\n“url”.containing => url\\n“get” => method\\nmapUnique(‘optic:rest/parameter’) => parameters\\n--></span>\\n```Javascript\\napp.get(‘url’, function (req, res) {\\n\\n})\\n```</code></pre>\\n      </div>\\n<h2 id=\\\"containers\\\"><a href=\\\"#containers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Containers</h2>\\n<p>Containers can be used to label callbacks or other blocks of code and set rules about what kind of code can go insIDe of them.</p>\\n<p>A container is defined in the example snippet by adding an inline comment with the following format <code class=\\\"language-text\\\">//:{container name}</code></p>\\n<p>The settings for each container are set by adding a new block to your annotation</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">“{container name}” = (\\n  // container settings go here\\n)</code></pre>\\n      </div>\\n<p>A container block supports several kinds of entires:</p>\\n<ul>\\n<li><a href=\\\"#mapping-schemas\\\">Map Schema</a> entires. If set in a container block, only Schemas found within the container will be included in the output array.</li>\\n<li><a href=\\\"#variables\\\">Variable</a> declarations, scoped to this container and its children</li>\\n<li>Children match rule (default any), determines if Optic will match the container/its parent based on the contents of this container.</li>\\n</ul>\\n<table>\\n<thead>\\n<tr>\\n<th>name</th>\\n<th>matches when</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>any</td>\\n<td>always</td>\\n</tr>\\n<tr>\\n<td>same-plus</td>\\n<td>children from example snippet are present, in the order they appear in the example, plus any other children.  \\n<br>\\n example snippet = \\n[\\nA, B, C\\n]\\n \\n<br>\\n \\n[\\nB, C\\n]\\n false \\n<br>\\n \\n[\\nA, D, B, C\\n]\\n true \\n<br>\\n \\n[\\nA, B, C\\n]\\n true \\n<br>\\n \\n[\\nA, B, C, D\\n]\\n true</td>\\n</tr>\\n<tr>\\n<td>same-plus-any-order</td>\\n<td>children from the example snippet are present, in any order, plus any other children \\n<br>\\n example snippet = \\n[\\nA, B, C\\n]\\n \\n<br>\\n \\n[\\nC, B, D, E, A\\n]\\n true \\n<br>\\n \\n[\\nA, B, C\\n]\\n true \\n<br>\\n \\n[\\nC, B, D, E\\n]\\n false</td>\\n</tr>\\n<tr>\\n<td>exact</td>\\n<td>children match those in the example snippet</td>\\n</tr>\\n</tbody>\\n</table>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\"><span class=\\\"token comment\\\">&lt;!-- Lens-def\\nname=“Route”\\nlanguage=“es7”\\nSchema=“optic:rest/route”\\n“url”.containing => url\\n“get” => method\\n“callback” = (\\n  mapUnique(‘optic:rest/parameter’) &lt;=> parameters\\n  any\\n)\\n--></span>\\n```Javascript\\napp.get(‘url’, function (req, res) {\\n  //:callback\\n})\\n```</code></pre>\\n      </div>\\n<h2 id=\\\"variables\\\"><a href=\\\"#variables\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Variables</h2>\\n<p>Variables are a key part of Optic’s loose matching. When you define a variable in your Lens, it tells Optic that a token can have any value, as long as it is consistent throughout the code block.</p>\\n<p>For instance without a variable defined, all 3 instances of “result” must equal “result” for Optic to match this section of code.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">function test(result) {\\n\\tmessage.post(result)\\n\\tsystem.process(result)\\n}</code></pre>\\n      </div>\\n<p>If you define a variable for ‘result’ the following code will also be matched,</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">function test(otherToken) {\\n\\tmessage.post(otherToken)\\n\\tsystem.process(otherToken)\\n}</code></pre>\\n      </div>\\n<p>But this code would not be</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">function test(otherToken) {\\n\\tmessage.post(otherToken)\\n\\tsystem.process(result)\\n}</code></pre>\\n      </div>\\n<p>Variables are defined by typing the token name in quotes and then adding an asterisks.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">“variable”*</code></pre>\\n      </div>\\n<h2 id=\\\"initial-values\\\"><a href=\\\"#initial-values\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Initial Values</h2>\\n<p>If you want to set an initial value for your Lens you can set an optional field called <code class=\\\"language-text\\\">initial</code>. If you set it equal to a JSON string, that JSON becomes the initial value of each instance that gets parsed. This is useful when you have Lenses that act like enums or Lenses that don’t extract all their required values from the code. </p>\\n<blockquote>\\n<p>Note: The requirement of the JSON being a string rather than normal object notation will be relaxed in a future release. </p>\\n</blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-markdown\\\"><code class=\\\"language-markdown\\\">initial=‘{“code”: 200}’</code></pre>\\n      </div>\",\n\t\t\t\"timeToRead\": 7,\n\t\t\t\"excerpt\": \"Defining Lenses Defining a Lens in Optic Markdown is like showing your friend a snippet of code and pointing out all the parts they can edit…\",\n\t\t\t\"frontmatter\": {\n\t\t\t\t\"title\": \"Lenses\",\n\t\t\t\t\"cover\": null,\n\t\t\t\t\"date\": null,\n\t\t\t\t\"category\": null,\n\t\t\t\t\"tags\": null\n\t\t\t}\n\t\t},\n\t\t\"tableOfContents\": {\n\t\t\t\"chapters\": [\n\t\t\t\t{\n\t\t\t\t\t\"title\": \"What is Optic?\",\n\t\t\t\t\t\"entries\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/another-code-generator.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/another-code-generator\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Another Code Generator?\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/technical-overview.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/technical-overview\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Technical Overview\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/ontology.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/optics-ontology\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Optic's Ontology\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/markdown.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/optic-markdown\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Optic Markdown\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"title\": \"Using Optic\",\n\t\t\t\t\t\"entries\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/get-started.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/using-get-started\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Using Get Started\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/workflow.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/workflow\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Workflow\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/properties.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/properties\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Properties\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/search.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/search\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Search\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/transform.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/transform\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Transform\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/sync.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/sync\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Sync\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"title\": \"Authoring Knowledge\",\n\t\t\t\t\t\"entries\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/get-started.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/authoring-get-started\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Authoring Get Started\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/knowledge-packages.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/knowledge-packages\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Knowledge Packages\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/schemas.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/schemas\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Schemas\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/lenses.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/lenses\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Lenses\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/transformations.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/transformations\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Transformations\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/publishing.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/publishing\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Publishing\",\n\t\t\t\t\t\t\t\t\t\t\"type\": null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"tableOfContentsSkills\": {\n\t\t\t\"chapters\": [\n\t\t\t\t{\n\t\t\t\t\t\"title\": \"Generate RequestJS calls for every route in an Express backend\",\n\t\t\t\t\t\"entries\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"entry\": {\n\t\t\t\t\t\t\t\t\"id\": \"/Users/aidancunniffe/Desktop/optic-homepage/content/skills/generate-requestjs.md absPath of file\",\n\t\t\t\t\t\t\t\t\"childMarkdownRemark\": {\n\t\t\t\t\t\t\t\t\t\"headings\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Generate RequestJS calls for every route in an Express backend\",\n\t\t\t\t\t\t\t\t\t\t\t\"depth\": 1\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Requirements\",\n\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Including Skills\",\n\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Our First Transform\",\n\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Generating Networking Calls from your Client Code\",\n\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Name and Source Annotations\",\n\t\t\t\t\t\t\t\t\t\t\t\"depth\": 3\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Syncing API & Networking Code\",\n\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"value\": \"Going Further\",\n\t\t\t\t\t\t\t\t\t\t\t\"depth\": 2\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"fields\": {\n\t\t\t\t\t\t\t\t\t\t\"slug\": \"/generate-request-js-calls-for-every-route-in-an-express-backend\"\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\"frontmatter\": {\n\t\t\t\t\t\t\t\t\t\t\"title\": \"Generate RequestJS calls for every route in an Express backend\",\n\t\t\t\t\t\t\t\t\t\t\"type\": \"skill\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t},\n\t\"pathContext\": {\n\t\t\"slug\": \"/lenses\",\n\t\t\"type\": null\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/lenses.json\n// module id = 434\n// module chunks = 90369145381862"],"sourceRoot":""}