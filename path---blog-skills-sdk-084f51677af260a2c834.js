webpackJsonp([0xf761779a709c],{449:function(n,a){n.exports={data:{markdownRemark:{html:'<p><img src="/blog-images/yc.jpg"></p>\n<p>This weeks marks the end of Optic’s YC Batch. Working with the YC Partners, alumni and PG himself was an amazing experience and I think both myself and Optic are in a far better position than when the summer started. Optic’s team is still just me, but there is now a much wider cast of supporting players contributing their time, code and ideas on regular basis. Thank you to everyone writing emails each week about your thoughts on Optic and for those of you who answer my texts asking your opinions on different ideas at the oddest of hours. </p>\n<p>Over the summer we’ve seen our daily usage grow and we’ve had the opportunity to work with a handful of larger development teams that want to use Optic. There’s still a lot of work to do to make Optic useful to a broader range of developers, but we finally have a good idea of what those things are and we’re excited to start building. Now that YC is over we plan to hire 2 full time engineers that can help us take Optic to the next level. If you’re interested in being one of them or know who we should talk with please email me at aidan@useoptic.com </p>\n<h2 id="goodbye-optic-markdown"><a href="#goodbye-optic-markdown" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Goodbye Optic Markdown</h2>\n<p>This week we’ll be sunsetting Optic Markdown, our attempt to make documentation human + machine readable by adding annotations above example code. In general I still believe documentation will one day be usable by both humans + machines, but looking back I think this is an area in Optic’s architecture where I was perhaps too bold. Here are some reasons we’ve decided to move away from this approach: </p>\n<ul>\n<li>difficult to learn - every dsl we came up with (and we went through 2-3 iterations) had a pretty steep learning curve.  </li>\n<li>intimidating - users thought they had to write nice docs alongside our annotations</li>\n<li>hard to test - since md isn’t really suited for writing tests the only way to see how your skills would behave was loading them up in Optic</li>\n<li>doing both poorly - if all the other reasons were not enough, our annotations made great docs look bad </li>\n</ul>\n<h2 id="hello-skills-sdk"><a href="#hello-skills-sdk" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hello Skills SDK</h2>\n<p>In response to this feedback we’ve begun working on the <a href="https://github.com/opticdev/optic-skills-sdk">Optic Skills SDK</a>. Our design for the Skills SDK is focused on achieving a high degree of learnability and testability. Instead of unfamiliar annotations Optic skills will be created by calling functions that ship with the SDK. </p>\n<p>To define a lens you provide example code, and an object describing this code as data: </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> lens <span class="token operator">=</span> js<span class="token template-string"><span class="token string">`\napp.get(\'url\', (req, res) => {\n\t//:handler\n})`</span></span>\n\nlens<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tmethod<span class="token punctuation">:</span> <span class="token function">tokenWithValue</span><span class="token punctuation">(</span><span class="token string">\'get\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\turl<span class="token punctuation">:</span> <span class="token function">literalWithValue</span><span class="token punctuation">(</span><span class="token string">\'url\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tparameters<span class="token punctuation">:</span> <span class="token function">collect</span><span class="token punctuation">(</span>parametersLens<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\theaders<span class="token punctuation">:</span> <span class="token function">collect</span><span class="token punctuation">(</span>headerLens<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tresponses<span class="token punctuation">:</span> <span class="token function">collect</span><span class="token punctuation">(</span>responseLens<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nlens<span class="token punctuation">.</span>containers<span class="token punctuation">.</span>handler <span class="token operator">=</span> AnyChildren</code></pre>\n      </div>\n<p>To define a schema: </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">Schema</span><span class="token punctuation">(</span><span class="token string">\'example\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\ttype<span class="token punctuation">:</span> <span class="token string">\'object\'</span><span class="token punctuation">,</span>\n\tproperties<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\t\tvalue1<span class="token punctuation">:</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\tvalue2<span class="token punctuation">:</span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>And finally transformations are described by writing actual functions:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">Transformation</span><span class="token punctuation">(</span><span class="token string">\'Name\'</span><span class="token punctuation">,</span> <span class="token string">\'input:schema\'</span><span class="token punctuation">,</span> <span class="token string">\'output:schema\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>input<span class="token punctuation">,</span> answers<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token punctuation">{</span>key1<span class="token punctuation">:</span> input<span class="token punctuation">.</span>a<span class="token punctuation">,</span> key2<span class="token punctuation">:</span> input<span class="token punctuation">.</span>b<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>The Skills SDK will also ship with test scripts that make it easy to simulate generating, parsing and mutating code throughout your project:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">\'can generate express parameters\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    packageTestKit<span class="token punctuation">.</span><span class="token function">testLens</span><span class="token punctuation">(</span><span class="token string">\'express-parameter\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>lensTestKit<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> result <span class="token operator">=</span> lensTestKit<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token string">\'query\'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'abc\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token function">assert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>success<span class="token punctuation">)</span>\n        <span class="token function">assert</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">\'req.query.abc\'</span><span class="token punctuation">)</span>\n        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>When you\'re ready to use your skills you\'ll be able to run <code class="language-text">opticsdk publishlocal</code> to try it out locally or <code class="language-text">opticsdk publish</code> to deploy it on our public registry of skills.</p>\n<p>Our goal for the SDK is to make it easy for anyone to learn, build and share useful Optic Skills in minutes, not hours. </p>\n<h3 id="status"><a href="#status" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Status</h3>\n<p>We plan to finish our first release of the Skills SDK over the next week. You can follow our progress <a href="https://github.com/opticdev/optic-skills-sdk/commits/master">here on GitHub</a>. If you have any ideas for how to make the SDK great please share them with me at aidan@useoptic.com </p>\n<p>Once the SDK is finished I\'ll a) be porting all the current Skills to the new SDK so there are an abundance of examples to reference and b) start a wholesale rewrite of all the Optic docs.   </p>\n<h3 id="future-of-the-sdk"><a href="#future-of-the-sdk" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Future of the SDK</h3>\n<p>The SDK, if it\'s successful, provides the ideal staging area for more sophisticated tooling within Optic. Many Optic users at larger companies are interested in using Optic for high level linting. A traditional linter will only help you catch syntax errors and they require extensive knowledge of the AST tree to write. Optic, with its higher level understanding of your code, opens the door to much more powerful linting rules created with a fraction of the work. </p>\n<p>For instance, if you wanted to check that all post endpoints had authentication you could write a rule like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">Rule</span><span class="token punctuation">(</span><span class="token string">\'optic:rest/endpoint\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> endpoint<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">\'post\'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>endpoint<span class="token punctuation">.</span>auth\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">\'All post endpoints must have authentication\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>This idea of advanced Optic linters is still very nascent, but we imagine it fitting very nicely into the SDK. </p>\n<h2 id="thanks-for-your-support-and-please-check-out-the-sdk-when-it-launches"><a href="#thanks-for-your-support-and-please-check-out-the-sdk-when-it-launches" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Thanks for your support and please check out the SDK when it launches!</h2>',timeToRead:4,excerpt:"This weeks marks the end of Optic’s YC Batch. Working with the YC Partners, alumni and PG himself was an amazing experience and I think both…",frontmatter:{title:"Skills SDK",cover:null,date:"2018-09-04T00:00:00.000Z",category:"tech",tags:["programming","ai","automation","software development"]},fields:{slug:"/blog/skills-sdk"}}},pathContext:{slug:"/blog/skills-sdk"}}}});
//# sourceMappingURL=path---blog-skills-sdk-084f51677af260a2c834.js.map