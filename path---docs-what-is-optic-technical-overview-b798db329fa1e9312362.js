webpackJsonp([0x906bfe8b07b6],{451:function(e,t){e.exports={data:{postBySlug:{html:'<h1 id="what-am-i-running"><a href="#what-am-i-running" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What Am I Running?</h1>\n<p>When you start the Optic App, an Optic Server and the Optic UI start at the same time. The Optic Server monitors the files in a repository and keeps an up to date record of all the entities it finds in your code. To be clear, this server is a local, and none of your code ever leaves your machine during processing.</p>\n<p>Optic servers also listen for state changes from editors like Atom, Intellij and Vim. Those editors are constantly sending their state (cursor position and staged contents) to the server using a websocket. When results are found by the server those are forwarded to Optic’s UI.</p>\n<p>Users can interact with the Optic API through the UI we provide. When you submit changes to the server they are processed and then forwarded back to the editors and written to the file system.</p>\n<p>When you reference a knowledge package that cannot be resolved locally, Optic will try to load it from its central registry. Other than that and some bug logging, no remote resources are called.</p>\n<p><img src="/doc-images/system-overview.svg" alt="alt text"></p>\n<h1 id="code-as-information-repos-as-apis"><a href="#code-as-information-repos-as-apis" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Code as Information, Repos as APIs</h1>\n<p>Generating, parsing and mutating source code are hard problems. We designed away the cognitive load of code generation and replaced it with a simpler interface for manipulating code. One of our earliest shifts in mindset was to start thinking about code as information.</p>\n<p>What do we mean by “code as information”? Take a simple route that has a query parameter called <code class="language-text">name</code> and returns the string <code class="language-text">Hello {name}</code>. There are a variety approaches, libraries, and even languages we could write that in. All these representations have different data (strings), but the information content in terms of a REST Route are the same. We are looking for the high level concepts like routes, requests, forms, and validation that exist outside of any one kind of code.</p>\n<p>Data:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">app.get(‘/hello’, function (req, res) {\n\tres.send(200, `Hello ${req.query.name}`)\n})</code></pre>\n      </div>\n<p>Information:</p>\n<div class="gatsby-highlight">\n      <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n\tpath<span class="token operator">:</span> ‘/hello’<span class="token punctuation">,</span>\n\tmethod<span class="token operator">:</span> ‘get’<span class="token punctuation">,</span>\n\tparameters<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tin<span class="token operator">:</span> ‘query’<span class="token punctuation">,</span>\n\t\tname<span class="token operator">:</span> ‘name’\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\tresponses<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n\t\tcode<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n\t\ttype<span class="token operator">:</span> ‘string’\n\t<span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>In Optic, these descriptions of underlying code always conform to a Schema and can be represented by JSON. When Optic reads a code base, it is looking for descriptions like the one above for any code that it has been trained to interpret.</p>\n<p>When you make changes to the descriptions and send them back to Optic, the system  automatically figures out how to update the raw source code to match the new description. The capability to patch AST Trees without destroying formatting or user changes is learned for each programming language with our machine learning toolkit <a href="https://github.com/opticdev/marvin">Marvin</a>.</p>\n<p><img src="/doc-images/put-change.gif" alt="alt text"></p>\n<p>All of this is done over an API that Optic exposes for every repository it is watching. You can query for specific entities (routes, pages, forms, models, etc), post new descriptions, and put changes to specific sections of code that Optic understands. We use these APIs to power the Optic Agent.</p>\n<p><strong>In summary</strong>, Optic provides an interface to manipulate source code with JSON descriptions. Developers who are authoring content for Optic or building on top of our APIs don’t need to think about the challenges of traditional code generation.</p>\n<h1 id="performance"><a href="#performance" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Performance</h1>\n<p>Optic’s performance has been tested with projects of various sizes. We’ve done most of our testing on a 2014 MacBook Pro running a Core I5 processor clocked at 2.6 GHZ. Typically the Optic server will idle around 1% of a CPU Core. When you are actively typing in new code it will rev up to 20-30% of a core, which is about what most Text Editors run at during data entry.</p>\n<p>When you stop typing and start compiling or running your code, Optic will idle, so its computations will not slow down your testing.</p>\n<p>There are a few expensive tasks Optic performs sporadically:</p>\n<ul>\n<li>The first is the initial run at indexing your entire project. This can take upwards of 30 seconds depending on the total number of lines of code.</li>\n<li>Generating sync patches is fairly expensive as well and can take between 5 and 20 seconds based on the size of your project. This action is user triggered.</li>\n<li>The third is the “Building Knowledge” phase. This is when Optic collects all your Optic Knowledge and compiles them into small, fast parsers and mutators. This only happens when you change your your <code class="language-text">optic.yml</code> file and typically lasts 2-15 seconds depending on the number of dependencies.</li>\n</ul>\n<p>If you run into performance issues we will do our best to correct them ASAP. You can add an issue on <a href="https://github.com/opticdev/optic/issues/new">our core repo</a>.</p>',timeToRead:3,excerpt:"What Am I Running? When you start the Optic App, an Optic Server and the Optic UI start at the same time. The Optic Server monitors the…",frontmatter:{title:"Technical Overview",cover:null,date:null,category:null,tags:null}},tableOfContents:{chapters:[{title:"What is Optic?",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/what-is-optic.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/what_is_optic/what-is-optic"},frontmatter:{title:"What Is Optic",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/another-code-generator.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/what_is_optic/another-code-generator"},frontmatter:{title:"Another Code Generator?",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/what_is_optic/technical-overview.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/what_is_optic/technical-overview"},frontmatter:{title:"Technical Overview",type:null}}}}]},{title:"Using Optic",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/get-started.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/get-started"},frontmatter:{title:"Get Started",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/workflow.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/workflow"},frontmatter:{title:"Workflow",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/properties.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/properties"},frontmatter:{title:"Properties",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/search.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/search"},frontmatter:{title:"Search",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/transform.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/transform"},frontmatter:{title:"Transform",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/using/sync.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/using/sync"},frontmatter:{title:"Sync",type:null}}}}]},{title:"Extending Optic",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/extending-optic.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/extending-optic"},frontmatter:{title:"Extending Optic",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/writing-skills.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/writing-skills"},frontmatter:{title:"Writing Skills",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/knowledge-packages.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/knowledge-packages"},frontmatter:{title:"Knowledge Packages",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/lenses.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/writing-lenses"},frontmatter:{title:"Writing Lenses",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/transformations.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/defining-transformations"},frontmatter:{title:"Defining Transformations",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/schemas.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/defining-schemas"},frontmatter:{title:"Defining Schemas",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/publishing.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/publishing"},frontmatter:{title:"Publishing",type:null}}}},{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/lessons/authoring/adding-ides.md absPath of file",childMarkdownRemark:{fields:{slug:"/docs/authoring/adding-optic-support-for-new-id-es"},frontmatter:{title:"Adding Optic Support for new IDEs",type:null}}}}]}]},tableOfContentsSkills:{chapters:[{title:"Generate RequestJS calls for every route in an Express backend",entries:[{entry:{id:"/Users/aidancunniffe/Desktop/optic-homepage/content/skills/generate-requestjs.md absPath of file",childMarkdownRemark:{headings:[{value:"Generate RequestJS calls for every route in an Express backend",depth:1},{value:"Requirements",depth:2},{value:"Including Skills",depth:2},{value:"Our First Transform",depth:2},{value:"Generating Networking Calls from your Client Code",depth:2},{value:"Name and Source Annotations",depth:3},{value:"Syncing API & Networking Code",depth:2},{value:"Going Further",depth:2}],fields:{slug:"/skills/generate-request-js-calls-for-every-route-in-an-express-backend"},frontmatter:{title:"Generate RequestJS calls for every route in an Express backend",type:"skill"}}}}]}]}},pathContext:{slug:"/docs/what_is_optic/technical-overview",type:null}}}});
//# sourceMappingURL=path---docs-what-is-optic-technical-overview-b798db329fa1e9312362.js.map